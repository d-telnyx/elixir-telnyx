{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "title": "Telnyx API",
    "x-endpoint-cost": "light",
    "description": "SIP trunking, SMS, MMS, Call Control and Telephony Data Services.",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "email": "support@telnyx.com"
    }
  },
  "servers": [
    {
      "url": "https://api.telnyx.com/v2",
      "description": "Version 2.0.0 of the Telnyx API"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Call Commands",
      "description": "Call Control command operations"
    },
    {
      "name": "Call Control Applications",
      "description": "Call Control applications operations"
    },
    {
      "name": "Call Information",
      "description": "Call information"
    },
    {
      "name": "Conference Commands",
      "description": "Conference command operations"
    },
    {
      "name": "Debugging",
      "description": "Call Control debugging"
    },
    {
      "name": "Messages",
      "description": "Messages"
    },
    {
      "name": "Messaging Hosted Number",
      "description": "Manage your messaging hosted numbers"
    },
    {
      "name": "Messaging Profiles",
      "description": "Messaging profiles"
    },
    {
      "name": "Messaging URL Domains",
      "description": "Messaging URL Domains"
    },
    {
      "name": "Number Configurations",
      "description": "Configure your phone numbers"
    },
    {
      "name": "Queue Commands",
      "description": "Queue commands operations"
    },
    {
      "name": "Recordings Commands",
      "description": "Recordings commands operations"
    },
    {
      "name": "Short Codes",
      "description": "Short codes"
    }
  ],
  "paths": {
    "/call_control_applications": {
      "get": {
        "description": "Return a list of call control applications.",
        "summary": "List call control applications",
        "operationId": "listCallControlApplications",
        "tags": [
          "Call Control Applications"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterApplicationName"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCallControlApplicationsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "interactive"
      },
      "post": {
        "summary": "Create a call control application",
        "description": "Create a call control application.",
        "operationId": "createCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "description": "Create call control application request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCallControlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "422": {
            "description": "Bad Request"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/call_control_applications/{id}": {
      "delete": {
        "description": "Deletes a call control application.",
        "summary": "Delete a call control application",
        "operationId": "deleteCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1293384261075731499"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "interactive"
      },
      "get": {
        "description": "Retrieves the details of an existing call control application.",
        "summary": "Retrieve a call control application",
        "operationId": "retrieveCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1293384261075731499"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "interactive"
      },
      "patch": {
        "summary": "Update a call control application",
        "description": "Updates settings of an existing call control application.",
        "operationId": "updateCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1293384261075731499"
            }
          }
        ],
        "requestBody": {
          "description": "Update call control application request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallControlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/call_events": {
      "get": {
        "summary": "List call events",
        "description": "Filters call events by given filter parameters. Events are ordered by `event_timestamp`. If filter for `call_leg_id` or `call_session_id` is not present, it only filters events from the last 24 hours.\n\n**Note**: Only one `filter[event_timestamp]` can be passed.\n",
        "x-latency-category": "responsive",
        "x-group-parameters": "true",
        "operationId": "listCallEvents",
        "tags": [
          "Debugging"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCallLegId"
          },
          {
            "$ref": "#/components/parameters/FilterCallSessionId"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventStatus"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventType"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampGreaterThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampGreaterThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampLessThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampLessThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampEqualTo"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCallEventsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/calls": {
      "post": {
        "summary": "Dial",
        "description": "Dial a number or SIP URI from a given connection. A successful response will include a `call_leg_id` which can be used to correlate the command with subsequent webhooks.\n\n**Expected Webhooks:**\n\n- `call.initiated`\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was set to `detect_beep`, `greeting_end` or `detect_words`",
        "operationId": "callDial",
        "tags": [
          "Call Commands"
        ],
        "requestBody": {
          "description": "Call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineDetectionEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineGreetingEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}": {
      "get": {
        "summary": "Retrieve a call status",
        "description": "Returns the status of a call (data is available 10 minutes after call ended).",
        "operationId": "retrieveCallStatus",
        "tags": [
          "Call Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/answer": {
      "post": {
        "summary": "Answer call",
        "description": "Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.\n\n**Expected Webhooks:**\n\n- `call.answered`\n",
        "operationId": "callAnswer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Answer call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/bridge": {
      "post": {
        "summary": "Bridge calls",
        "description": "Bridge two call control calls.\n\n**Expected Webhooks:**\n\n- `call.bridged` for Leg A\n- `call.bridged` for Leg B\n",
        "operationId": "callBridge",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Bridge call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/enqueue": {
      "post": {
        "summary": "Enqueue call",
        "description": "Put the call in a queue.",
        "operationId": "callEnqueue",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Enqueue call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnqueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callEnqueued": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallEnqueuedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_start": {
      "post": {
        "summary": "Forking start",
        "description": "Call forking allows you to stream the media from a call to a specific target in realtime. \nThis stream can be used to enable realtime audio analysis to support a \nvariety of use cases, including fraud detection, or the creation of AI-generated audio responses. \nRequests must specify either the `target` attribute or the `rx` and `tx` attributes.\n\n**Expected Webhooks:**\n\n- `call.fork.started`\n- `call.fork.stopped`\n\n**Simple Telnyx RTP Encapsulation Protocol (STREP)**\n\n*Note: This header/encapsulation is not used when the `rx` and `tx`\nparameters have been specified; it only applies when media is forked\nusing the `target` attribute.*\n\nIf the destination for forked media is specified using the \"target\"\nattribute, the RTP will be encapsulated in an extra Telnyx protocol,\nwhich adds a 24 byte header to the RTP payload in each packet. The STREP\nheader includes the Call Control `call_leg_id` for stream\nidentification, along with bits that represent the direction (inbound or\noutbound) of the media. This 24-byte header sits between the UDP header\nand the RTP header.\n\nThe STREP header makes it possible to fork RTP for multiple calls (or\ntwo RTP streams for the same call) to the same IP:port, where the\nstreams can be demultiplexed by your application using the information\nin the header. Of course, it's still possible to ignore this header\ncompletely, for example, if sending forked media for different calls to\ndifferent ports or IP addresses. In this case, simply strip 24 bytes\n(or use the second byte to find the header length) from the received UDP\npayload to get the RTP (RTP header and payload).\n\n```\nSTREP Specification\n\n  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |1 1|Version|L|D|    HeaderLen  |  reserved (2 bytes)           |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |       reserved (4 bytes, for UDP ports or anything else)      |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |               The call_leg_id                                 |\n |                   from Call Control                           |\n |                       (128 bits / 16 bytes)                   |\n |                           (this is binary data)               |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n 11\n   Static bits 11, always set to 11 to easily distinguish forked media\n   from RTP (10) and T.38 media (usually 00) and SIP (which begins\n   with a capital letter, so begins with bits 01). This is a magic number.\n\n Version\n   Four bits to indicate the version number of the protocol, starting at 0001.\n\n L\n   One bit to represent the leg of the call (A or B).\n   0 represents the A (first) leg of the call.\n   1 represents the B (second) leg of the call.\n\n D\n   One bit to represent the direction of this RTP stream.\n   0 represents media received by Telnyx.\n   1 represents media transmitted by Telnyx.\n\n HeaderLen (1 byte)\n   The length of the header in bytes.\n   Note that this value does not include the length of the payload. The total\n   size of the RTP can be calculated by subtracting the HeaderLen from the UDP\n   length (minus 8 for the UDP header).\n   In version 1, this value will always be 24.\n\n Reserved (6 bytes)\n   Reserved for future use and to make sure that the header is a multiple of 32 bits\n\n Call Leg ID\n   A 128-bit identifier for the call leg.\n   This is the call_leg_id from Call Control.\n```\n",
        "operationId": "callForkStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Fork media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_stop": {
      "post": {
        "summary": "Forking stop",
        "description": "Stop forking a call.\n\n**Expected Webhooks:**\n\n- `call.fork.stopped`\n",
        "operationId": "callForkStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop forking media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_stop": {
      "post": {
        "summary": "Gather stop",
        "description": "Stop current gather.\n\n**Expected Webhooks:**\n\n- `call.gather.ended`\n",
        "operationId": "callGatherStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop current gather",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopGatherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_audio": {
      "post": {
        "summary": "Gather using audio",
        "description": "Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_audio_url', which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the `gather_using_audio` command.\n\n**Expected Webhooks:**\n\n- `call.playback.started`\n- `call.playback.ended`\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "callGatherUsingAudio",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using audio request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingAudioRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_speak": {
      "post": {
        "summary": "Gather using speak",
        "description": "Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_payload', which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the `gather_using_speak` command.\n\n**Expected Webhooks:**\n\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "callGatherUsingSpeak",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using speak request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/hangup": {
      "post": {
        "summary": "Hangup call",
        "description": "Hang up the call.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n- `call.recording.saved`\n",
        "operationId": "callHangup",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Hangup request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HangupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/leave_queue": {
      "post": {
        "summary": "Remove call from a queue",
        "description": "Removes the call from a queue.",
        "operationId": "leaveQueue",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Removes the call from the queue, the call currently is enqueued in.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveQueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_start": {
      "post": {
        "summary": "Play audio URL",
        "description": "Play an audio file on the call. If multiple play audio commands are issued consecutively,\nthe audio files will be placed in a queue awaiting playback.\n\n*Notes:*\n\n- When `overlay` is enabled, `target_legs` is limited to `self`.\n- A customer cannot Play Audio with `overlay=true` unless there is a Play Audio with `overlay=false` actively playing.\n\n**Expected Webhooks:**\n\n- `call.playback.started`\n- `call.playback.ended`\n",
        "operationId": "callPlaybackStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Play audio URL request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayAudioUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_stop": {
      "post": {
        "summary": "Stop audio playback",
        "description": "Stop audio being played on the call.\n\n**Expected Webhooks:**\n\n- `call.playback.ended` or `call.speak.ended`\n",
        "operationId": "callPlaybackStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop audio playback request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaybackStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_pause": {
      "post": {
        "summary": "Record pause",
        "description": "Pause recording the call. Recording can be resumed via Resume recording command.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callRecordPause",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Pause recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_resume": {
      "post": {
        "summary": "Record resume",
        "description": "Resume recording the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callRecordResume",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Resume recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_start": {
      "post": {
        "summary": "Recording start",
        "description": "Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.\n\n**Expected Webhooks:**\n\n- `call.recording.saved`\n",
        "operationId": "callRecordStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start recording audio request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_stop": {
      "post": {
        "summary": "Recording stop",
        "description": "Stop recording the call.\n\n**Expected Webhooks:**\n\n- `call.recording.saved`\n",
        "operationId": "callRecordStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/refer": {
      "post": {
        "summary": "SIP Refer a call",
        "description": "Initiate a SIP Refer on a Call Control call. You can initiate a SIP Refer at any point in the duration of a call.\n\n**Expected Webhooks:**\n\n- `call.refer.started`\n- `call.refer.completed`\n- `call.refer.failed`\n",
        "operationId": "callRefer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Refer request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callReferStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferCompleted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferCompletedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferFailedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/reject": {
      "post": {
        "summary": "Reject a call",
        "description": "Reject an incoming call.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n",
        "operationId": "callReject",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Reject request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/send_dtmf": {
      "post": {
        "summary": "Send DTMF",
        "description": "Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callSendDTMF",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Send DTMF request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDTMFRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/speak": {
      "post": {
        "summary": "Speak text",
        "description": "Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.\n\n**Expected Webhooks:**\n\n- `call.speak.started`\n- `call.speak.ended`\n",
        "operationId": "callSpeak",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Speak request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_start": {
      "post": {
        "summary": "Transcription start",
        "description": "Start real-time transcription. Transcription will stop on call hang-up, or can be initiated via the Transcription stop command.",
        "operationId": "callTranscriptionStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription start request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "transcription": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TranscriptionEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_stop": {
      "post": {
        "summary": "Transcription stop",
        "description": "Stop real-time transcription.",
        "operationId": "callTranscriptionStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription stop request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transfer": {
      "post": {
        "summary": "Transfer call",
        "description": "Transfer a call to a new destination. If the transfer is unsuccessful, a `call.hangup` webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.\n\n**Expected Webhooks:**\n\n- `call.initiated`\n- `call.bridged` to Leg B\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was set to `detect_beep`, `greeting_end` or `detect_words`",
        "operationId": "callTransfer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transfer call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences": {
      "get": {
        "x-latency-category": "responsive",
        "description": "Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by `expires_at`.",
        "summary": "List conferences",
        "operationId": "listConferences",
        "tags": [
          "Conference Commands"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterConferenceName"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListConferencesResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        }
      },
      "post": {
        "summary": "Create conference",
        "description": "Create a conference from an existing call leg using a `call_control_id` and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.\n\n**Expected Webhooks:**\n\n- `conference.created`\n- `conference.participant.joined`\n- `conference.participant.left`\n- `conference.ended`\n- `conference.recording.saved`\n- `conference.floor.changed`\n",
        "operationId": "createConference",
        "tags": [
          "Conference Commands"
        ],
        "requestBody": {
          "description": "Create a conference",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceCreated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceCreatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceFloorChanged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceFloorChangedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{conference_id}/participants": {
      "get": {
        "description": "Lists conference participants",
        "summary": "List conference participants",
        "operationId": "listConferenceParticipants",
        "tags": [
          "Conference Commands"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "conference_id",
            "description": "Uniquely identifies the conference by id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[muted]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not muted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[on_hold]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not put on hold",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[whispering]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are whispering or are not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListParticipantsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}": {
      "get": {
        "summary": "Retrieve a conference",
        "description": "Retrieve an existing conference",
        "operationId": "retrieveConference",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/dial_participant": {
      "post": {
        "x-latency-category": "interactive",
        "summary": "Dial a new participant into a conference",
        "description": "Dials a phone number and, when the call is answered, automatically joins them into the specified conference.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n- `call.answered`\n- `conference.participant.joined`\n- `conference.participant.left`\n",
        "operationId": "conferenceDialParticipantIn",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Dial Into Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conferences/{id}/actions/hold": {
      "post": {
        "summary": "Hold conference participants",
        "description": "Hold a list of participants in a conference call",
        "operationId": "conferenceHoldParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceHoldRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/join": {
      "post": {
        "summary": "Join a conference",
        "description": "Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the `call_control_id` of the leg you wish to join to the conference as an attribute.\n\n**Expected Webhooks:**\n\n- `conference.participant.joined`\n- `conference.participant.left`\n",
        "operationId": "conferenceJoin",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Join Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/mute": {
      "post": {
        "summary": "Mute conference participants",
        "description": "Mute a list of participants in a conference call",
        "operationId": "conferenceMuteParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceMuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/play": {
      "post": {
        "summary": "Play audio to conference participants",
        "description": "Play audio to all or some participants on a conference call.",
        "operationId": "conferencePlayAudio",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferencePlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferencePlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferencePlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_start": {
      "post": {
        "summary": "Conference recording start",
        "description": "Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.\n\n**Expected Webhooks:**\n\n- `conference.recording.saved`",
        "operationId": "conferenceStartRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference to record by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_stop": {
      "post": {
        "summary": "Conference recording stop",
        "description": "Stop recording the conference.\n\n**Expected Webhooks:**\n\n- `conference.recording.saved`\n",
        "operationId": "conferenceStopRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference to stop the recording for by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Stop recording conference request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/speak": {
      "post": {
        "summary": "Speak text to conference participants",
        "description": "Convert text to speech and play it to all or some participants.",
        "operationId": "conferenceSpeakText",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/stop": {
      "post": {
        "summary": "Stop audio being played on the conference",
        "description": "Stop audio being played to all or some participants on a conference call.",
        "operationId": "conferenceStopAudio",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unhold": {
      "post": {
        "summary": "Unhold conference participants",
        "description": "Unhold a list of participants in a conference call",
        "operationId": "conferenceUnholdParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnholdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unmute": {
      "post": {
        "summary": "Unmute conference participants",
        "description": "Unmute a list of participants in a conference call",
        "operationId": "conferenceUnmuteParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnmuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/update": {
      "post": {
        "summary": "Update conference participant",
        "description": "Update conference participant supervisor_role",
        "operationId": "conferenceUpdate",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/messages": {
      "post": {
        "summary": "Send a message",
        "description": "Send a message with a Phone Number, Alphanumeric Sender ID, Short Code or Number Pool.\n\nThis endpoint allows you to send a message with any messaging resource.\nCurrent messaging resources include: long-code, short-code, number-pool, and\nalphanumeric-sender-id.\n",
        "operationId": "createMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/long_code": {
      "post": {
        "summary": "Send a long code message",
        "operationId": "createLongCodeMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLongCodeMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/number_pool": {
      "post": {
        "summary": "Send a message using number pool",
        "operationId": "createNumberPoolMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberPoolMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/short_code": {
      "post": {
        "summary": "Send a short code message",
        "operationId": "createShortCodeMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortCodeMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/{id}": {
      "get": {
        "summary": "Retrieve a message",
        "description": "Note: This API endpoint can only retrieve messages that are no older than 10 days since their creation. If you require messages older than this, please generate an [MDR report.](https://developers.telnyx.com/docs/api/v1/reports/MDR-Reports)",
        "operationId": "retrieveMessage",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the message",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders": {
      "get": {
        "summary": "List messaging hosted number orders",
        "operationId": "listMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingHostedNumberOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a messaging hosted number order",
        "operationId": "createMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessagingHostedNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}": {
      "get": {
        "summary": "Retrieve a messaging hosted number order",
        "operationId": "retrieveMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}/actions/file_upload": {
      "post": {
        "summary": "Upload file required for a messaging hosted number order",
        "operationId": "uploadFileMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileMessagingHostedNumberOrderRequest"
              },
              "encoding": {
                "loa": {
                  "contentType": "application/pdf"
                },
                "bill": {
                  "contentType": "application/pdf"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_numbers/{id}": {
      "delete": {
        "summary": "Delete a messaging hosted number",
        "operationId": "deleteMessagingHostedNumber",
        "tags": [
          "Messaging Hosted Number"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profile_metrics": {
      "get": {
        "summary": "List messaging profile metrics",
        "operationId": "listMessagingProfileMetrics",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetric"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetricTimeFrame"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfileMetrics"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles": {
      "get": {
        "summary": "List messaging profiles",
        "operationId": "listMessagingProfiles",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfilesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a messaging profile",
        "operationId": "createMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "description": "New Messaging Profile object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessagingProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "inboundMessage": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/InboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "replacedLinkClick": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ReplacedLinkClickEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}": {
      "delete": {
        "summary": "Delete a messaging profile",
        "operationId": "deleteMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Retrieve a messaging profile",
        "operationId": "retrieveMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a messaging profile",
        "operationId": "updateMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "requestBody": {
          "description": "New Messaging Profile object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessagingProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/metrics": {
      "get": {
        "summary": "Retrieve messaging profile metrics",
        "operationId": "retrieveMessagingProfileDetailedMetrics",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetricTimeFrame"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveMessagingProfileMetrics"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/phone_numbers": {
      "get": {
        "summary": "List phone numbers associated with a messaging profile",
        "operationId": "listMessagingProfilePhoneNumbers",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfilePhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/short_codes": {
      "get": {
        "summary": "List short codes associated with a messaging profile",
        "operationId": "listMessagingProfileShortCodes",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfileShortCodesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_url_domains": {
      "get": {
        "summary": "List messaging URL domains",
        "operationId": "listMessagingUrlDomains",
        "tags": [
          "Messaging URL Domains"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingUrlDomains"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/messaging": {
      "get": {
        "summary": "List phone numbers with messaging settings",
        "operationId": "listPhoneNumbersWithMessagingSettings",
        "tags": [
          "Number Configurations"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/messaging": {
      "get": {
        "summary": "Retrieve a phone number with messaging settings",
        "operationId": "retrievePhoneNumberWithMessagingSettings",
        "tags": [
          "Number Configurations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a phone number with messaging settings",
        "operationId": "updatePhoneNumberWithMessagingSettings",
        "tags": [
          "Number Configurations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated messaging settings for the phone number",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberMessagingSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/queues/{queue_name}": {
      "get": {
        "summary": "Retrieve a call queue",
        "description": "Retrieve an existing call queue",
        "operationId": "retrieveCallQueue",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls": {
      "get": {
        "summary": "Retrieve calls from a queue",
        "description": "Retrieve the list of calls in an existing queue",
        "operationId": "listQueueCalls",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListQueueCallsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls/{call_control_id}": {
      "get": {
        "summary": "Retrieve a call from a queue",
        "description": "Retrieve an existing call from an existing queue",
        "operationId": "retrieveCallFromQueue",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueCallResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/recordings": {
      "get": {
        "description": "Lists recordings for the authenticated user",
        "summary": "List recordings",
        "operationId": "listRecordings",
        "tags": [
          "Recordings Commands"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "filter[conference_id]",
            "in": "query",
            "description": "Return only recordings associated with a given conference",
            "required": false,
            "schema": {
              "type": "string",
              "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
            }
          },
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "Return only recordings created later than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "Return only recordings created earlier than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRecordingsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/recordings/{id}": {
      "get": {
        "description": "Retrieve a recording from the authenticated user's recordings",
        "summary": "Retrieve a recording",
        "operationId": "retrieveRecording",
        "tags": [
          "Recordings Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the recording",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/short_codes": {
      "get": {
        "summary": "List short codes",
        "operationId": "listShortCodes",
        "tags": [
          "Short Codes"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[messaging_profile_id]",
            "in": "query",
            "description": "Filter by Messaging Profile ID. Use the string `null` for phone numbers without assigned profiles. A synonym for the `/messaging_profiles/{id}/short_codes` endpoint when querying about an extant profile.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListShortCodesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/short_codes/{id}": {
      "get": {
        "summary": "Retrieve a short code",
        "operationId": "retrieveShortCode",
        "tags": [
          "Short Codes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ShortCodeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShortCodeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update short code",
        "operationId": "updateShortCode",
        "description": "Update the settings for a specific short code. To unbind a short code from a profile, set the `messaging_profile_id` to `null` or an empty string.",
        "tags": [
          "Short Codes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ShortCodeId"
          }
        ],
        "requestBody": {
          "description": "Short code update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShortCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShortCodeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    }
  },
  "components": {
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "parameters": {
      "CallControlId": {
        "name": "call_control_id",
        "description": "Unique identifier and token for controlling the call",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "FilterApplicationName": {
        "name": "filter[application_name][contains]",
        "in": "query",
        "required": false,
        "description": "If present, applications with <code>application_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterCallEventStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "Event status",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "delivered",
            "failed"
          ],
          "example": "delivered"
        }
      },
      "FilterCallEventTimestampEqualTo": {
        "name": "filter[event_timestamp][eq]",
        "in": "query",
        "description": "Event timestamp: equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampGreaterThan": {
        "name": "filter[event_timestamp][gt]",
        "in": "query",
        "description": "Event timestamp: greater than",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampGreaterThanOrEqualTo": {
        "name": "filter[event_timestamp][gte]",
        "in": "query",
        "description": "Event timestamp: greater than or equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampLessThan": {
        "name": "filter[event_timestamp][lt]",
        "in": "query",
        "description": "Event timestamp: lower than",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampLessThanOrEqualTo": {
        "name": "filter[event_timestamp][lte]",
        "in": "query",
        "description": "Event timestamp: lower than or equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventType": {
        "name": "filter[type]",
        "in": "query",
        "description": "Event type",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "command",
            "webhook"
          ],
          "example": "webhook"
        }
      },
      "FilterCallLegId": {
        "name": "filter[call_leg_id]",
        "in": "query",
        "description": "The unique identifier of an individual call leg.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterCallSessionId": {
        "name": "filter[call_session_id]",
        "in": "query",
        "description": "The unique identifier of the call control session. A session may include multiple call leg events.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterConferenceName": {
        "name": "filter[name]",
        "in": "query",
        "description": "If present, conferences will be filtered to those with a matching `name` attribute. Matching is case-sensitive",
        "schema": {
          "type": "string"
        }
      },
      "FilterOutboundVoiceProfileId": {
        "name": "filter[outbound.outbound_voice_profile_id]",
        "in": "query",
        "required": false,
        "description": "Identifies the associated outbound voice profile.",
        "schema": {
          "type": "string",
          "format": "int64",
          "example": "1293384261075731499"
        }
      },
      "MessagingProfileId": {
        "name": "id",
        "in": "path",
        "description": "The id of the messaging profile to retrieve",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "MessagingProfileMetric": {
        "name": "id",
        "in": "query",
        "description": "The id of the messaging profile(s) to retrieve",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "MessagingProfileMetricTimeFrame": {
        "name": "time_frame",
        "in": "query",
        "description": "The timeframe for which you'd like to retrieve metrics.",
        "required": false,
        "schema": {
          "type": "string",
          "default": "24h",
          "enum": [
            "1h",
            "3h",
            "24h",
            "3d",
            "7d",
            "30d"
          ]
        }
      },
      "PageNumber": {
        "name": "page[number]",
        "in": "query",
        "description": "The page number to load",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "PageSize": {
        "name": "page[size]",
        "in": "query",
        "description": "The size of the page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 250,
          "default": 20
        }
      },
      "ShortCodeId": {
        "name": "id",
        "in": "path",
        "description": "The id of the short code",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "SortConnection": {
        "name": "sort",
        "in": "query",
        "required": false,
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>connection_name</code>: sorts the result by the\n    <code>connection_name</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-connection_name</code>: sorts the result by the\n    <code>connection_name</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "connection_name",
            "active"
          ],
          "example": "connection_name",
          "default": "created_at"
        }
      }
    },
    "requestBodies": {},
    "responses": {
      "CallControlApplicationResponse": {
        "description": "Successful response with details about a call control application.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Call Control Application Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlApplication"
                }
              }
            }
          }
        }
      },
      "CallControlCommandResponse": {
        "description": "Successful response upon making a call control command.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Call Control Command Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlCommandResult"
                }
              }
            }
          }
        }
      },
      "ConferenceCommandResponse": {
        "description": "Successful response upon making a conference command.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Conference Command Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ConferenceCommandResult"
                }
              }
            }
          }
        }
      },
      "ConferenceResponse": {
        "description": "Successful response with details about a conference.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Conference Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Conference"
                }
              }
            }
          }
        }
      },
      "GenericErrorResponse": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "ListCallControlApplicationsResponse": {
        "description": "Successful response with a list of call control applications.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Call Control Applications Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallControlApplication"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCallEventsResponse": {
        "description": "Successful response with a list of call events.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Call Events Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallEvent"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListConferencesResponse": {
        "description": "Successful response with a list of conferences.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Conferences Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conference"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingHostedNumberOrdersResponse": {
        "description": "Successful response with a list of messaging hosted number orders.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Hosted Number Order Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingHostedNumberOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfileMetrics": {
        "description": "Successful response with a list of messaging profile metrics.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Metrics Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingProfileHighLevelMetrics"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfilePhoneNumbersResponse": {
        "description": "Successful response with a list of messaging profile phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Phone Numbers Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfileShortCodesResponse": {
        "description": "Successful response with a list of messaging profile short codes.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Short Codes Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortCode"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfilesResponse": {
        "description": "Successful response with a list of messaging profiles.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profiles Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingProfile"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingUrlDomains": {
        "description": "Successful response with details about a messaging URL domain.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Url Domains Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingUrlDomain"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListParticipantsResponse": {
        "description": "Successful response with a list of conference participants.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Participants Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Participant"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersWithMessagingSettingsResponse": {
        "description": "Successful response with a list of phone numbers with messaging settings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Settings Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListQueueCallsResponse": {
        "description": "Successful response with a list of calls in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Queue Calls Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueueCall"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRecordingsResponse": {
        "description": "Successful response with a list of recordings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Recordings Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recording"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListShortCodesResponse": {
        "description": "Successful response with a list of short codes.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Short Codes Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortCode"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "MessageResponse": {
        "description": "Successful response with details about a message.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Message Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/OutboundMessagePayload"
                }
              }
            }
          }
        }
      },
      "MessagingHostedNumberOrderResponse": {
        "description": "Successful response with details about a messaging hosted number order.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Hosted Number Order Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingHostedNumberOrder"
                }
              }
            }
          }
        }
      },
      "MessagingHostedNumberResponse": {
        "description": "Successful response with details about a messaging hosted number.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Hosted Number Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/HostedNumber"
                }
              }
            }
          }
        }
      },
      "MessagingProfileResponse": {
        "description": "Successful response with details about a messaging profile.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Messaging Profile Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingProfile"
                }
              }
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "Conference does not exist"
      },
      "PhoneNumberWithMessagingSettingsResponse": {
        "description": "Successful response with details about a phone number including voice settings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Settings Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                }
              }
            }
          }
        }
      },
      "QueueCallResponse": {
        "description": "Successful response with details about a call in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Queue Call Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/QueueCall"
                }
              }
            }
          }
        }
      },
      "QueueResponse": {
        "description": "Successful response with details about a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Queue Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          }
        }
      },
      "RecordingResponse": {
        "description": "Successful response with details about a recording.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get Recording Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Recording"
                }
              }
            }
          }
        }
      },
      "RetrieveCallStatusResponse": {
        "description": "Successful response with details about a call status.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Call Status Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        }
      },
      "RetrieveMessagingProfileMetrics": {
        "description": "Successful response with details about a messaging profile's metrics.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Profile Metrics Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingProfileDetailedMetrics"
                }
              }
            }
          }
        }
      },
      "ShortCodeResponse": {
        "description": "Successful response with details about a short code.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Short Code Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ShortCode"
                }
              }
            }
          }
        }
      },
      "UnauthorizedResponse": {
        "description": "Unauthorized"
      },
      "UnprocessableEntityResponse": {
        "description": "Unprocessable entity"
      }
    },
    "schemas": {
      "AnswerRequest": {
        "type": "object",
        "title": "Answer Request",
        "properties": {
          "billing_group_id": {
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "type": "string",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST"
        }
      },
      "BridgeRequest": {
        "type": "object",
        "title": "Bridge Request",
        "required": [
          "call_control_id"
        ],
        "properties": {
          "call_control_id": {
            "description": "The Call Control ID of the call you want to bridge with.",
            "type": "string",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "queue": {
            "description": "The name of the queue you want to bridge with, can't be used together with call_control_id parameter. Bridging with a queue means bridging with the first call in the queue. The call will always be removed from the queue regardless of whether bridging succeeds. Returns an error when the queue is empty.",
            "type": "string",
            "example": "support"
          },
          "park_after_unbridge": {
            "description": "Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred). If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the default behavior is to hang up the leg.",
            "type": "string",
            "example": "self"
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "park_after_unbridge": "self"
        }
      },
      "Call": {
        "type": "object",
        "title": "Call",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type"
        ],
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "is_alive": false,
          "record_type": "call"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "call"
            ],
            "example": "call"
          },
          "call_session_id": {
            "description": "ID that is unique to the call session and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call.",
            "type": "string",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          },
          "is_alive": {
            "description": "Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is asynchronous).",
            "type": "boolean",
            "example": true
          }
        }
      },
      "CallAnswered": {
        "type": "object",
        "title": "Call Answered",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.answered",
            "enum": [
              "call.answered"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "state": {
                "type": "string",
                "example": "answered",
                "enum": [
                  "answered"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.answered",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "state": "answered"
          }
        }
      },
      "CallAnsweredEvent": {
        "type": "object",
        "title": "Call Answered Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallAnswered"
          }
        }
      },
      "CallBridged": {
        "type": "object",
        "title": "Call Bridged",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.bridged",
            "enum": [
              "call.bridged"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "state": {
                "type": "string",
                "example": "bridged",
                "enum": [
                  "bridged"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.bridged",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "state": "bridged"
          }
        }
      },
      "CallBridgedEvent": {
        "type": "object",
        "title": "Call Bridged Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallBridged"
          }
        }
      },
      "CallControlApplication": {
        "type": "object",
        "title": "Call Control Application",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "type": "string",
            "description": "`Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "enum": [
              "\"Latency\"",
              "\"Chicago, IL\"",
              "\"Ashburn, VA\"",
              "\"San Jose, CA\""
            ],
            "example": "\"Amsterdam, Netherlands\"",
            "default": "\"Latency\""
          },
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was created",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "dtmf_type": {
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "example": "Inband",
            "default": "RFC 2833"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "example": true,
            "default": false
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "example": 10,
            "default": 30
          },
          "id": {
            "type": "string",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "record_type": {
            "type": "string",
            "enum": [
              "call_control_application"
            ],
            "default": "call_control_application"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was last updated",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "url",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as `https`.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_event_url": {
            "type": "string",
            "format": "url",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as `https`.",
            "example": "https://example.com"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "example": 25,
            "default": null,
            "nullable": true
          }
        },
        "example": {
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "application_name": "call-router",
          "created_at": "2018-02-02T22:25:27.521Z",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "id": "1293384261075731499",
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "record_type": "call_control_application",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_event_url": "https://example.com",
          "webhook_timeout_secs": 25
        }
      },
      "CallControlApplicationInbound": {
        "type": "object",
        "title": "Call Control Application Inbound",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "example": 10,
            "default": null
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
            "example": "example",
            "default": null
          },
          "sip_subdomain_receive_settings": {
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
            "enum": [
              "only_my_connections",
              "from_anyone"
            ],
            "example": "only_my_connections",
            "default": "from_anyone"
          }
        }
      },
      "CallControlApplicationOutbound": {
        "type": "object",
        "title": "Call Control Application Outbound",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
            "example": 10,
            "default": null
          },
          "outbound_voice_profile_id": {
            "type": "string",
            "format": "int64",
            "description": "Identifies the associated outbound voice profile.",
            "example": "1293384261075731499"
          }
        }
      },
      "CallControlCommandResult": {
        "type": "object",
        "title": "Call Control Command Result",
        "example": {
          "result": "ok"
        },
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        }
      },
      "CallDtmfReceived": {
        "type": "object",
        "title": "Call DTMF Received",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.dtmf.received",
            "enum": [
              "call.dtmf.received"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Identifies the type of resource."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "digit": {
                "type": "string",
                "example": "#",
                "description": "The received DTMF digit or symbol."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.dtmf.received",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digit": "#"
          }
        }
      },
      "CallDtmfReceivedEvent": {
        "type": "object",
        "title": "Call DTMF Received Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallDtmfReceived"
          }
        }
      },
      "CallEnqueued": {
        "type": "object",
        "title": "Call Enqueued",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.enqueued",
            "enum": [
              "call.enqueued"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "queue": {
                "type": "string",
                "example": "support",
                "description": "The name of the queue"
              },
              "current_position": {
                "type": "integer",
                "example": 7,
                "description": "Current position of the call in the queue."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.enqueued",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "current_position": 5
          }
        }
      },
      "CallEnqueuedEvent": {
        "type": "object",
        "title": "Call Enqueued Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallEnqueued"
          }
        }
      },
      "CallEvent": {
        "type": "object",
        "title": "Call Event",
        "required": [
          "record_type",
          "call_leg_id",
          "call_session_id",
          "event_timestamp",
          "name",
          "type",
          "metadata"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "call_event"
            ],
            "example": "call_event"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies an individual call leg.",
            "example": "308fe500-5213-11e9-ace7-02420a0f0668"
          },
          "call_session_id": {
            "type": "string",
            "description": "Uniquely identifies the call control session. A session may include multiple call leg events.",
            "example": "308fec30-5213-11e9-9d3f-02420a0f0668"
          },
          "event_timestamp": {
            "type": "string",
            "description": "Event timestamp",
            "example": "2019-03-29T11:10:19.127783Z"
          },
          "name": {
            "type": "string",
            "description": "Event name",
            "example": "call.hangup"
          },
          "type": {
            "type": "string",
            "description": "Event type",
            "enum": [
              "command",
              "webhook"
            ],
            "example": "webhook"
          },
          "metadata": {
            "type": "object",
            "description": "Event metadata, which includes raw event, and extra information based on event type"
          }
        },
        "example": {
          "record_type": "call_event",
          "call_leg_id": "308fe500-5213-11e9-ace7-02420a0f0668",
          "call_session_id": "308fec30-5213-11e9-9d3f-02420a0f0668",
          "event_timestamp": "2019-03-29T11:10:19.127783Z",
          "name": "call.hangup",
          "type": "webhook",
          "metadata": {}
        }
      },
      "CallForkStarted": {
        "type": "object",
        "title": "Call Fork Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.fork.started",
            "enum": [
              "call.fork.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          }
        }
      },
      "CallForkStartedEvent": {
        "type": "object",
        "title": "Call Fork Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStarted"
          }
        }
      },
      "CallForkStopped": {
        "type": "object",
        "title": "Call Fork Stopped",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.fork.stopped",
            "enum": [
              "call.fork.stopped"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.stopped",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          }
        }
      },
      "CallForkStoppedEvent": {
        "type": "object",
        "title": "Call Fork Stopped Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStopped"
          }
        }
      },
      "CallGatherEnded": {
        "type": "object",
        "title": "Call Gather Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.gather.ended",
            "enum": [
              "call.gather.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "digits": {
                "type": "string",
                "example": "5503",
                "description": "The received DTMF digit or symbol."
              },
              "status": {
                "type": "string",
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup",
                  "cancelled",
                  "cancelled_amd"
                ],
                "example": "valid",
                "description": "Reflects how command ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.gather.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digits": "123",
            "status": "valid"
          }
        }
      },
      "CallGatherEndedEvent": {
        "type": "object",
        "title": "Call Gather Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallGatherEnded"
          }
        }
      },
      "CallHangup": {
        "type": "object",
        "title": "Call Hangup",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.hangup",
            "enum": [
              "call.hangup"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "start_time": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when the call started."
              },
              "state": {
                "type": "string",
                "example": "hangup",
                "enum": [
                  "hangup"
                ],
                "description": "State received from a command."
              },
              "hangup_cause": {
                "type": "string",
                "example": "call_rejected",
                "enum": [
                  "call_rejected",
                  "normal_clearing",
                  "originator_cancel",
                  "timeout",
                  "time_limit",
                  "user_busy",
                  "not_found",
                  "unspecified"
                ],
                "description": "The reason the call was ended (`call_rejected`, `normal_clearing`, `originator_cancel`, `timeout`, `time_limit`, `user_busy`, `not_found` or `unspecified`)."
              },
              "hangup_source": {
                "type": "string",
                "example": "caller",
                "enum": [
                  "caller",
                  "callee",
                  "unknown"
                ],
                "description": "The party who ended the call (`callee`, `caller`, `unknown`)."
              },
              "sip_hangup_cause": {
                "type": "string",
                "example": "603",
                "description": "The reason the call was ended (SIP response code). If the SIP response is unavailable (in inbound calls for example) this is set to `unspecified`."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.hangup",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "start_time": "2018-02-02T22:20:27.521992Z",
            "state": "hangup",
            "hangup_cause": "call_rejected",
            "hangup_source": "caller",
            "sip_hangup_cause": "603"
          }
        }
      },
      "CallHangupEvent": {
        "type": "object",
        "title": "Call Hangup Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallHangup"
          }
        }
      },
      "CallInitiated": {
        "type": "object",
        "title": "Call Initiated",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.initiated",
            "enum": [
              "call.initiated"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "direction": {
                "type": "string",
                "example": "incoming",
                "enum": [
                  "incoming",
                  "outgoing"
                ],
                "description": "Whether the call is `incoming` or `outgoing`."
              },
              "state": {
                "type": "string",
                "example": "parked",
                "enum": [
                  "parked",
                  "bridging"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.initiated",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "direction": "incoming",
            "state": "parked"
          }
        }
      },
      "CallInitiatedEvent": {
        "type": "object",
        "title": "Call Initiated Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallInitiated"
          }
        }
      },
      "CallLeftQueue": {
        "type": "object",
        "title": "Call Left Queue",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.left.queue",
            "enum": [
              "call.left.queue"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "queue": {
                "type": "string",
                "example": "support",
                "description": "The name of the queue"
              },
              "reason": {
                "type": "string",
                "description": "The reason for leaving the queue",
                "example": "bridged",
                "enum": [
                  "bridged",
                  "bridging-in-process",
                  "hangup",
                  "leave",
                  "timeout"
                ]
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.left.queue",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "reason": "leave"
          }
        }
      },
      "CallLeftQueueEvent": {
        "type": "object",
        "title": "Call Left Queue Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallLeftQueue"
          }
        }
      },
      "CallMachineDetectionEnded": {
        "type": "object",
        "title": "Call Machine Detection Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.detection.ended",
            "enum": [
              "call.machine.detection.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "machine",
                "enum": [
                  "human",
                  "machine",
                  "not_sure"
                ],
                "description": "Answering machine detection result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.detection.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "human"
          }
        }
      },
      "CallMachineDetectionEndedEvent": {
        "type": "object",
        "title": "Call Machine Detection Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineDetectionEnded"
          }
        }
      },
      "CallMachineGreetingEnded": {
        "type": "object",
        "title": "Call Machine Greeting Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.greeting.ended",
            "enum": [
              "call.machine.greeting.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "ended",
                "enum": [
                  "ended",
                  "not_sure"
                ],
                "description": "Answering machine greeting ended result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.greeting.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "ended"
          }
        }
      },
      "CallMachineGreetingEndedEvent": {
        "type": "object",
        "title": "Call Machine Greeting Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineGreetingEnded"
          }
        }
      },
      "CallPlaybackEnded": {
        "type": "object",
        "title": "Call Playback Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.playback.ended",
            "enum": [
              "call.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "overlay": {
                "type": "boolean",
                "example": false,
                "description": "Whether the audio is going to be played in overlay mode or not."
              },
              "status": {
                "type": "string",
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup"
                ],
                "example": "valid",
                "description": "Reflects how command ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_name": "my_media_uploaded_to_media_storage_api",
            "overlay": false,
            "status": "valid"
          }
        }
      },
      "CallPlaybackEndedEvent": {
        "type": "object",
        "title": "Call Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackEnded"
          }
        }
      },
      "CallPlaybackStarted": {
        "type": "object",
        "title": "Call Playback Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.playback.started",
            "enum": [
              "call.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "overlay": {
                "type": "boolean",
                "example": false,
                "description": "Whether the audio is going to be played in overlay mode or not."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_url": "http://example.com/audio.wav",
            "overlay": false
          }
        }
      },
      "CallPlaybackStartedEvent": {
        "type": "object",
        "title": "Call Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackStarted"
          }
        }
      },
      "CallRecordingSaved": {
        "type": "object",
        "title": "Call Recording Saved",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.recording.saved",
            "enum": [
              "call.recording.saved"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "recording_started_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when recording started."
              },
              "recording_ended_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521992Z",
                "description": "ISO 8601 datetime of when recording ended."
              },
              "channels": {
                "type": "string",
                "example": "single",
                "enum": [
                  "single",
                  "dual"
                ],
                "description": "Whether recording was recorded in `single` or `dual` channel."
              },
              "recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              },
              "public_recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "recording_started_at": "2018-02-02T22:20:27.521992Z",
            "recording_ended_at": "2018-02-02T22:20:27.521992Z",
            "channels": "single",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        }
      },
      "CallRecordingSavedEvent": {
        "type": "object",
        "title": "Call Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallRecordingSaved"
          }
        }
      },
      "CallReferCompleted": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.completed",
            "enum": [
              "call.refer.completed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 200,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.completed",
          "id": "4ce4366d-8d87-44be-a00b-942154e9c5f5",
          "occurred_at": "2020-03-30T13:29:44.650000Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 200,
            "to": "+13129457420"
          }
        }
      },
      "CallReferCompletedEvent": {
        "type": "object",
        "title": "Call Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferCompleted"
          }
        }
      },
      "CallReferFailed": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.failed",
            "enum": [
              "call.refer.failed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 603,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.failed",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.130013Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 603,
            "to": "+13129457420"
          }
        }
      },
      "CallReferFailedEvent": {
        "type": "object",
        "title": "Call Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferFailed"
          }
        }
      },
      "CallReferStarted": {
        "type": "object",
        "title": "Call Refer Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.started",
            "enum": [
              "call.refer.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 100,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.started",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.130013Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 100,
            "to": "+13129457420"
          }
        }
      },
      "CallReferStartedEvent": {
        "type": "object",
        "title": "Call Refer Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferStarted"
          }
        }
      },
      "CallRequest": {
        "type": "object",
        "title": "Dial Request",
        "required": [
          "connection_id",
          "to",
          "from"
        ],
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "link_to": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg==",
          "sip_auth_username": "username",
          "sip_auth_password": "password"
        },
        "properties": {
          "to": {
            "description": "The DID or SIP URI to dial out to.",
            "type": "string",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `from` number of the original call if omitted.",
            "type": "string",
            "example": "+18005550101"
          },
          "from_display_name": {
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "type": "string",
            "example": "Company Name"
          },
          "connection_id": {
            "type": "string",
            "description": "The ID of the Call Control App (formerly ID of the connection) to be used when dialing the destination."
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back to the callee when the call is answered. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back to the callee when the call is answered. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being called. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.",
            "default": 30,
            "type": "integer",
            "example": 60,
            "format": "int32"
          },
          "time_limit_secs": {
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "default": 14400,
            "type": "integer",
            "example": 600,
            "format": "int32"
          },
          "answering_machine_detection": {
            "description": "Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
            "default": "disabled",
            "type": "string",
            "enum": [
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ]
          },
          "answering_machine_detection_config": {
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance.",
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "description": "Maximum timeout threshold for overall detection.",
                "default": 3500,
                "type": "integer",
                "example": 5000,
                "format": "int32"
              },
              "after_greeting_silence_millis": {
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "default": 800,
                "type": "integer",
                "example": 1000,
                "format": "int32"
              },
              "between_words_silence_millis": {
                "description": "Maximum threshold for silence between words.",
                "default": 50,
                "type": "integer",
                "example": 100,
                "format": "int32"
              },
              "greeting_duration_millis": {
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "default": 3500,
                "type": "integer",
                "example": 1500,
                "format": "int32"
              },
              "initial_silence_millis": {
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 1800,
                "format": "int32"
              },
              "maximum_number_of_words": {
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "default": 5,
                "type": "integer",
                "example": 3,
                "format": "int32"
              },
              "maximum_word_length_millis": {
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              },
              "silence_threshold": {
                "description": "Minimum noise threshold for any analysis.",
                "default": 256,
                "type": "integer",
                "example": 512,
                "format": "int32"
              },
              "greeting_total_analysis_time_millis": {
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "default": 5000,
                "type": "integer",
                "example": 7500,
                "format": "int32"
              },
              "greeting_silence_duration_millis": {
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "default": 1500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              }
            }
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "billing_group_id": {
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "type": "string",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "link_to": {
            "description": "Use another call's control id for sharing the same call session id",
            "type": "string",
            "example": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg=="
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string"
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        }
      },
      "CallSpeakEnded": {
        "type": "object",
        "title": "Call Speak Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.speak.ended",
            "enum": [
              "call.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "status": {
                "type": "string",
                "example": "completed",
                "enum": [
                  "completed",
                  "call_hangup"
                ],
                "description": "Reflects how `speak` ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "status": "completed"
          }
        }
      },
      "CallSpeakEndedEvent": {
        "type": "object",
        "title": "Call Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakEnded"
          }
        }
      },
      "CallSpeakStarted": {
        "type": "object",
        "title": "Call Speak Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.speak.started",
            "enum": [
              "call.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        }
      },
      "CallSpeakStartedEvent": {
        "type": "object",
        "title": "Call Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakStarted"
          }
        }
      },
      "Conference": {
        "type": "object",
        "title": "Conference",
        "required": [
          "record_type",
          "id",
          "name",
          "created_at",
          "expires_at"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "conference"
            ],
            "example": "conference"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the conference",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the conference",
            "example": "All hands meeting"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference will expire",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "region": {
            "type": "string",
            "description": "Region where the conference is hosted",
            "example": "sv1"
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "in_progress",
              "completed"
            ],
            "description": "Status of the conference",
            "example": "completed"
          },
          "end_reason": {
            "type": "string",
            "enum": [
              "all_left",
              "ended_via_api",
              "host_left",
              "time_exceeded"
            ],
            "description": "Reason why the conference ended",
            "example": "all_left"
          },
          "ended_by": {
            "type": "object",
            "description": "IDs related to who ended the conference. It is expected for them to all be there or all be null",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call Control ID which ended the conference",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=="
              },
              "call_session_id": {
                "type": "string",
                "description": "Call Session ID which ended the conference",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              }
            }
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection (Call Control App) associated with the conference",
            "example": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
          }
        },
        "example": {
          "record_type": "conference",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "All hands meeting",
          "created_at": "2019-01-23T18:10:02.574Z",
          "expires_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "region": "sv1",
          "status": "completed",
          "end_reason": "all_left",
          "ended_by": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "call_session_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          },
          "connection_id": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
        }
      },
      "ConferenceCallRequest": {
        "required": [
          "call_control_id",
          "from",
          "to"
        ],
        "type": "object",
        "title": "Conference Dial Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number).",
            "type": "string",
            "example": "+18005550101"
          },
          "hold": {
            "description": "Whether the participant should be put on hold immediately after joining the conference.",
            "example": true,
            "type": "boolean",
            "default": false
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. If media_name is also supplied, this is currently ignored. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "mute": {
            "description": "Whether the participant should be muted immediately after joining the conference.",
            "example": false,
            "type": "boolean",
            "default": false
          },
          "start_conference_on_enter": {
            "description": "Whether the conference should be started after the participant joins the conference.",
            "example": true,
            "type": "boolean",
            "default": false
          },
          "supervisor_role": {
            "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "to": {
            "description": "The DID or SIP URI to dial out and bridge to the given call.",
            "type": "string",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "hold": true,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "mute": true,
          "from": "+18005550101",
          "to": "+18005550100",
          "start_conference_on_enter": true,
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ]
        }
      },
      "ConferenceCommandResult": {
        "type": "object",
        "title": "Conference Command Result",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        },
        "example": {
          "result": "ok"
        }
      },
      "ConferenceCreated": {
        "type": "object",
        "title": "Conference Created",
        "example": {
          "record_type": "event",
          "event_type": "conference.created",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.created",
            "enum": [
              "conference.created"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceCreatedEvent": {
        "type": "object",
        "title": "Conference Created Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceCreated"
          }
        }
      },
      "ConferenceEnded": {
        "type": "object",
        "title": "Conference Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.ended",
            "enum": [
              "conference.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              },
              "reason": {
                "type": "string",
                "enum": [
                  "all_left",
                  "host_left",
                  "time_exceeded"
                ],
                "description": "Reason the conference ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z",
            "reason": "host_left"
          }
        }
      },
      "ConferenceEndedEvent": {
        "type": "object",
        "title": "Conference Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceEnded"
          }
        }
      },
      "ConferenceFloorChangedEvent": {
        "type": "object",
        "title": "Conference Floor Changed",
        "example": {
          "record_type": "event",
          "event_type": "conference.floor.changed",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.floor.changed",
            "enum": [
              "conference.floor.changed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call Control ID of the new speaker."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "Call Leg ID of the new speaker."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Call Session ID of the new speaker."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that had a speaker change event."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceHoldRequest": {
        "type": "object",
        "title": "Conference Hold Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. When empty all participants will be placed on hold.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participants when they are put on hold. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participants when they are put on hold. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ],
          "audio_url": "http://example.com/message.wav"
        }
      },
      "ConferenceMuteRequest": {
        "type": "object",
        "title": "Conference Mute Request",
        "properties": {
          "call_control_ids": {
            "description": "Array of unique identifiers and tokens for controlling the call. When empty all participants will be muted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ]
        }
      },
      "ConferenceParticipantJoined": {
        "type": "object",
        "title": "Conference Participant Joined",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.joined",
            "enum": [
              "conference.participant.joined"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.joined",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        }
      },
      "ConferenceParticipantJoinedEvent": {
        "type": "object",
        "title": "Conference Participant Joined Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantJoined"
          }
        }
      },
      "ConferenceParticipantLeft": {
        "type": "object",
        "title": "Conference Participant Left",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.left",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.left",
            "enum": [
              "conference.participant.left"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              }
            }
          }
        }
      },
      "ConferenceParticipantLeftEvent": {
        "type": "object",
        "title": "Conference Participant Left Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantLeft"
          }
        }
      },
      "ConferenceParticipantPlaybackEnded": {
        "type": "object",
        "title": "Conference Participant Playback Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.playback.ended",
            "enum": [
              "conference.participant.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantPlaybackEndedEvent": {
        "type": "object",
        "title": "Conference Participant Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackEnded"
          }
        }
      },
      "ConferenceParticipantPlaybackStarted": {
        "type": "object",
        "title": "Conference Participant Playback Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.playback.started",
            "enum": [
              "conference.participant.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantPlaybackStartedEvent": {
        "type": "object",
        "title": "Conference Participant Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackStarted"
          }
        }
      },
      "ConferenceParticipantSpeakEnded": {
        "type": "object",
        "title": "Conference Participant Speak Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.speak.ended",
            "enum": [
              "conference.participant.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantSpeakEndedEvent": {
        "type": "object",
        "title": "Conference Participant Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakEnded"
          }
        }
      },
      "ConferenceParticipantSpeakStarted": {
        "type": "object",
        "title": "Conference Participant Speak Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.speak.started",
            "enum": [
              "conference.participant.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantSpeakStartedEvent": {
        "type": "object",
        "title": "Conference Participant Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakStarted"
          }
        }
      },
      "ConferencePlayRequest": {
        "type": "object",
        "title": "Conference Play Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back in the conference. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back in the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "loop": {
            "description": "The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.",
            "example": "infinity",
            "default": 1,
            "$ref": "#/components/schemas/Loopcount"
          },
          "call_control_ids": {
            "description": "List of call control ids identifying participants the audio file should be played to. If not given, the audio file will be played to the entire conference.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav"
        }
      },
      "ConferencePlaybackEnded": {
        "type": "object",
        "title": "Conference Playback Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.playback.ended",
            "enum": [
              "conference.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferencePlaybackEndedEvent": {
        "type": "object",
        "title": "Conference Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackEnded"
          }
        }
      },
      "ConferencePlaybackStarted": {
        "type": "object",
        "title": "Conference Playback Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.playback.started",
            "enum": [
              "conference.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferencePlaybackStartedEvent": {
        "type": "object",
        "title": "Conference Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackStarted"
          }
        }
      },
      "ConferenceRecordingSaved": {
        "type": "object",
        "title": "Conference Recording Saved",
        "example": {
          "record_type": "event",
          "event_type": "conference.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "channels": "single",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "format": "mp3",
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "recording_ended_at": "2018-02-02T22:20:27.521992Z",
            "recording_id": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47",
            "recording_started_at": "2021-05-11T10:17:03.692107Z",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.recording.saved",
            "enum": [
              "conference.recording.saved"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "channels": {
                "type": "string",
                "example": "single",
                "enum": [
                  "single",
                  "dual"
                ],
                "description": "Whether recording was recorded in `single` or `dual` channel."
              },
              "conference_id": {
                "type": "string",
                "format": "uuid",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference that is being recorded."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "format": {
                "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
                "type": "string",
                "enum": [
                  "wav",
                  "mp3"
                ],
                "example": "mp3"
              },
              "public_recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              },
              "recording_ended_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521992Z",
                "description": "ISO 8601 datetime of when recording ended."
              },
              "recording_id": {
                "type": "string",
                "format": "uuid",
                "example": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47",
                "description": "ID of the conference recording."
              },
              "recording_started_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when recording started."
              },
              "recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              }
            }
          }
        }
      },
      "ConferenceRecordingSavedEvent": {
        "type": "object",
        "title": "Conference Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceRecordingSaved"
          }
        }
      },
      "ConferenceSpeakEnded": {
        "type": "object",
        "title": "Conference Speak Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.speak.ended",
            "enum": [
              "conference.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceSpeakEndedEvent": {
        "type": "object",
        "title": "Conference Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakEnded"
          }
        }
      },
      "ConferenceSpeakRequest": {
        "type": "object",
        "title": "Conference Speak Request",
        "required": [
          "payload",
          "voice",
          "language"
        ],
        "properties": {
          "call_control_ids": {
            "description": "Call Control IDs of participants who will hear the spoken text. When empty all participants will hear the spoken text.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this to participants"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "voice": {
            "description": "The gender of the voice used to speak the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language used to speak the text.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ],
          "payload": "Say this to participants",
          "payload_type": "text",
          "voice": "female",
          "language": "en-US",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ConferenceSpeakStarted": {
        "type": "object",
        "title": "Conference Speak Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.speak.started",
            "enum": [
              "conference.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceSpeakStartedEvent": {
        "type": "object",
        "title": "Conference Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakStarted"
          }
        }
      },
      "ConferenceStopRequest": {
        "type": "object",
        "title": "Conference Stop Request",
        "properties": {
          "call_control_ids": {
            "description": "List of call control ids identifying participants the audio file should stop be played to. If not given, the audio will be stoped to the entire conference.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ConferenceUnholdRequest": {
        "required": [
          "call_control_ids"
        ],
        "type": "object",
        "title": "Conference Unhold Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unheld.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ]
        }
      },
      "ConferenceUnmuteRequest": {
        "type": "object",
        "title": "Conference Unmute Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unmuted. When empty all participants will be unmuted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ]
        }
      },
      "CreateCallControlApplicationRequest": {
        "type": "object",
        "title": "Create Call Control Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "properties": {
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "webhook_event_url": {
            "type": "string",
            "format": "url",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "type": "string",
            "description": "<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "enum": [
              "\"Latency\"",
              "\"Chicago, IL\"",
              "\"Ashburn, VA\"",
              "\"San Jose, CA\""
            ],
            "example": "\"Amsterdam, Netherlands\"",
            "default": "\"Latency\""
          },
          "dtmf_type": {
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "example": "Inband",
            "default": "RFC 2833"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "example": true,
            "default": false
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "example": 10,
            "default": 30
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "url",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          }
        },
        "example": {
          "application_name": "call-router",
          "webhook_event_url": "https://example.com",
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25
        }
      },
      "CreateConferenceRequest": {
        "required": [
          "call_control_id",
          "name"
        ],
        "type": "object",
        "title": "Create Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "name": {
            "description": "Name of the conference",
            "example": "Business",
            "type": "string"
          },
          "beep_enabled": {
            "description": "Whether a beep sound should be played when participants join and/or leave the conference.",
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "default": "never",
            "example": "on_exit",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "comfort_noise": {
            "description": "Toggle background comfort noise.",
            "example": false,
            "type": "boolean",
            "default": true
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "duration_minutes": {
            "description": "Time length (minutes) after which the conference will end.",
            "example": 5,
            "type": "integer"
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to participants joining the conference. The URL can point to either a WAV or MP3 file. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to participants joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\"."
          },
          "start_conference_on_create": {
            "description": "Whether the conference should be started on creation. If the conference isn't started all participants that join are automatically put on hold. Defaults to \"true\".",
            "example": false,
            "type": "boolean"
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "name": "Business",
          "beep_enabled": "always",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "duration_minutes": 5,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "start_conference_on_create": false
        }
      },
      "CreateLongCodeMessageRequest": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "format": "address",
            "description": "Phone number, in +E.164 format, used to send the message."
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "url"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "to": "+13125550002",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateMessageRequest": {
        "type": "object",
        "required": [
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "format": "address",
            "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).\n\n**Required if sending with a phone number, short code, or alphanumeric sender ID.**\n"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile.\n\n**Required if sending via number pool or with an alphanumeric sender ID.**\n"
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "url"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "to": "+18445550001",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateMessagingHostedNumberOrderRequest": {
        "type": "object",
        "example": {
          "messaging_profile_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "phone_numbers": [
            "+18665550001",
            "+18665550002"
          ]
        },
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "+E.164"
            },
            "description": "Phone numbers to be used for hosted messaging."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Automatically associate the number with this messaging profile ID when the order is complete."
          }
        }
      },
      "CreateMessagingProfileRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "A user friendly name for the messaging profile.",
            "type": "string"
          },
          "enabled": {
            "description": "Specifies whether the messaging profile is enabled or not.",
            "type": "boolean",
            "default": true
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "type": "string",
            "format": "url",
            "default": "",
            "nullable": true
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "url",
            "default": "",
            "nullable": true
          },
          "webhook_api_version": {
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.",
            "type": "string",
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ],
            "default": "2"
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          }
        },
        "example": {
          "name": "My name",
          "enabled": true,
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "webhook_api_version": "2",
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 1,
            "skip_unhealthy": true,
            "sticky_sender": false,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "",
            "replace_blacklist_only": true,
            "send_webhooks": false
          }
        }
      },
      "CreateNumberPoolMessageRequest": {
        "type": "object",
        "required": [
          "to",
          "messaging_profile_id"
        ],
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "url"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "to": [
            "+13125550002"
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateShortCodeMessageRequest": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "format": "address",
            "description": "Phone number, in +E.164 format, used to send the message."
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "url"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "to": "+18445550001",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CustomSipHeader": {
        "type": "object",
        "title": "Custom SIP Header",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "description": "The name of the header to add.",
            "type": "string",
            "example": "head_1"
          },
          "value": {
            "description": "The value of the header.",
            "type": "string",
            "example": "val_1"
          }
        },
        "example": {
          "name": "head_1",
          "value": "val_1"
        }
      },
      "EnqueueRequest": {
        "type": "object",
        "title": "Enqueue Request",
        "properties": {
          "queue_name": {
            "description": "The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it will be created.",
            "type": "string",
            "example": "tier_1_support"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "max_wait_time_secs": {
            "description": "The number of seconds after which the call will be removed from the queue.",
            "type": "integer",
            "example": 600
          },
          "max_size": {
            "description": "The maximum number of calls allowed in the queue at a given time. Can't be modified for an existing queue.",
            "type": "integer",
            "default": 100,
            "example": 200
          }
        },
        "example": {
          "queue": "support",
          "max_wait_time_secs": 600,
          "max_size": 20,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "Error": {
        "required": [
          "code",
          "title"
        ],
        "properties": {
          "code": {
            "type": "string",
            "format": "integer"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "type": "string",
                "format": "json-pointer"
              },
              "parameter": {
                "description": "Indicates which query parameter caused the error.",
                "type": "string"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "Errors": {
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "GatherUsingAudioRequest": {
        "type": "object",
        "title": "Gather Using Audio Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back at the beginning of each prompt. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back at the beginning of each prompt. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "invalid_audio_url": {
            "type": "string",
            "description": "The URL of a file to play when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The URL can point to either a WAV or MP3 file. invalid_media_name and invalid_audio_url cannot be used together in one request.",
            "example": "http://example.com/invalid.wav"
          },
          "invalid_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "minimum_digits": {
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "default": 1,
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "maximum_digits": {
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "default": 128,
            "type": "integer",
            "example": 10,
            "format": "int32"
          },
          "maximum_tries": {
            "description": "The maximum number of times the file should be played if there is no input from the user on the call.",
            "default": 3,
            "type": "integer",
            "example": 3,
            "format": "int32"
          },
          "timeout_millis": {
            "description": "The number of milliseconds to wait for a DTMF response after file playback ends before a replaying the sound file.",
            "default": 60000,
            "type": "integer",
            "example": 60000,
            "format": "int32"
          },
          "terminating_digit": {
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "type": "string",
            "example": "#"
          },
          "valid_digits": {
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "type": "string",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "description": "The number of milliseconds to wait for input between digits.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://example.com/message.wav",
          "invalid_audio_url": "http://example.com/message.wav",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "timeout_millis": 10000,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "GatherUsingSpeakRequest": {
        "type": "object",
        "title": "Gather Using Speak Request",
        "required": [
          "voice",
          "language",
          "payload"
        ],
        "properties": {
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "invalid_payload": {
            "description": "The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "service_level": {
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "type": "string",
            "enum": [
              "basic",
              "premium"
            ],
            "example": "premium"
          },
          "voice": {
            "description": "The gender of the voice used to speak back the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language you want spoken.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "minimum_digits": {
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "default": 1,
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "maximum_digits": {
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "default": 128,
            "type": "integer",
            "example": 10,
            "format": "int32"
          },
          "maximum_tries": {
            "description": "The maximum number of times that a file should be played back if there is no input from the user on the call.",
            "default": 3,
            "type": "integer",
            "example": 3,
            "format": "int32"
          },
          "timeout_millis": {
            "description": "The number of milliseconds to wait for a DTMF response after speak ends before a replaying the sound file.",
            "default": 60000,
            "type": "integer",
            "example": 60000,
            "format": "int32"
          },
          "terminating_digit": {
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "type": "string",
            "example": "#"
          },
          "valid_digits": {
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "type": "string",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "description": "The number of milliseconds to wait for input between digits.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "say this on call",
          "invalid_payload": "say this on call",
          "payload_type": "text",
          "service_level": "premium",
          "voice": "male",
          "language": "arb",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "HangupRequest": {
        "type": "object",
        "title": "Hangup Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "HostedNumber": {
        "example": [
          {
            "record_type": "messaging_hosted_number",
            "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
            "phone_number": "+18665550001",
            "status": "successful"
          }
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_hosted_number"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "format": "+E.164",
            "description": "The messaging hosted phone number (+E.164 format)"
          },
          "status": {
            "type": "string",
            "enum": [
              "deleted",
              "failed",
              "pending",
              "successful"
            ]
          }
        }
      },
      "InboundMessage": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "message.received",
            "enum": [
              "message.received"
            ],
            "description": "The type of event being delivered."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created."
          },
          "payload": {
            "$ref": "#/components/schemas/InboundMessagePayload"
          }
        },
        "example": {
          "record_type": "event",
          "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
          "event_type": "message.received",
          "occurred_at": "date-time",
          "payload": {
            "record_type": "message",
            "direction": "inbound",
            "id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
            "type": "SMS",
            "messaging_profile_id": "0f512bda-ae1e-4597-8e11-e5f5686b97d3",
            "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
            "from": {
              "phone_number": "+18665550001",
              "carrier": "T-MOBILE USA, INC.",
              "line_type": "Wireless"
            },
            "to": [
              {
                "phone_number": "+18445550001",
                "status": "delivered",
                "carrier": "TELNYX LLC",
                "line_type": "VoIP"
              }
            ],
            "text": "Hello, World!",
            "subject": "From Telnyx!",
            "media": [],
            "webhook_url": "https://www.example.com/hooks",
            "webhook_failover_url": "https://backup.example.com/hooks",
            "encoding": "GSM-7",
            "parts": 1,
            "tags": [
              "Greetings"
            ],
            "cost": null,
            "received_at": "2019-01-23T18:10:02.574Z",
            "sent_at": null,
            "completed_at": null,
            "valid_until": null,
            "errors": []
          }
        }
      },
      "InboundMessageEvent": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboundMessage"
          }
        }
      },
      "InboundMessagePayload": {
        "properties": {
          "record_type": {
            "type": "string",
            "example": "message",
            "enum": [
              "message"
            ],
            "description": "Identifies the type of the resource."
          },
          "direction": {
            "type": "string",
            "example": "inbound",
            "enum": [
              "inbound"
            ],
            "description": "The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "type": {
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ],
            "description": "The type of message. This value can be either 'sms' or 'mms'."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "format": "address",
                  "description": "Receiving address (+E.164 formatted phone number or short code)."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "delivered",
                    "sending_failed",
                    "delivery_failed",
                    "delivery_unconfirmed",
                    "webhook_delivered"
                  ]
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "type": "string",
                  "description": "The line-type of the receiver.",
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless",
                    ""
                  ]
                }
              }
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "format": "address",
                  "description": "Receiving address (+E.164 formatted phone number or short code)."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "delivered",
                    "sending_failed",
                    "delivery_failed",
                    "delivery_unconfirmed"
                  ]
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "type": "string",
                  "description": "The line-type of the receiver.",
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless",
                    ""
                  ]
                }
              }
            }
          },
          "from": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "format": "address",
                "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code)."
              },
              "status": {
                "type": "string",
                "enum": [
                  "received",
                  "delivered"
                ]
              },
              "carrier": {
                "type": "string",
                "description": "The carrier of the sender."
              },
              "line_type": {
                "type": "string",
                "description": "The line-type of the sender.",
                "enum": [
                  "Wireline",
                  "Wireless",
                  "VoWiFi",
                  "VoIP",
                  "Pre-Paid Wireless",
                  ""
                ]
              }
            }
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "url",
                  "description": "The url of the media requested to be sent."
                },
                "content_type": {
                  "type": "string",
                  "format": "mime-type",
                  "description": "The MIME type of the requested media."
                },
                "size": {
                  "type": "integer",
                  "description": "The size of the requested media."
                },
                "hash_sha256": {
                  "type": "string",
                  "minLength": 32,
                  "maxLength": 32,
                  "description": "The SHA256 hash of the requested media."
                }
              }
            }
          },
          "webhook_url": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "description": "The URL where webhooks related to this message will be sent."
          },
          "webhook_failover_url": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails."
          },
          "encoding": {
            "type": "string",
            "description": "Encoding scheme used for the message body."
          },
          "parts": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "Number of parts into which the message's body must be split."
          },
          "tags": {
            "type": "array",
            "description": "Tags associated with the resource.",
            "items": {
              "type": "string"
            }
          },
          "cost": {
            "type": "object",
            "nullable": true,
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "description": "The amount deducted from your account."
              },
              "currency": {
                "type": "string",
                "format": "iso4217",
                "description": "The ISO 4217 currency identifier."
              }
            }
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message request was received."
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Not used for inbound messages."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Not used for inbound messages."
          },
          "valid_until": {
            "type": "string",
            "description": "Not used for inbound messages.",
            "format": "date-time",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "description": "These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "record_type": "message",
          "direction": "inbound",
          "id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
          "type": "SMS",
          "messaging_profile_id": "0f512bda-ae1e-4597-8e11-e5f5686b97d3",
          "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
          "from": {
            "phone_number": "+18665550001",
            "status": "delivered",
            "carrier": "T-MOBILE USA, INC.",
            "line_type": "Wireless"
          },
          "to": [
            {
              "phone_number": "+18445550001",
              "status": "delivered",
              "carrier": "TELNYX LLC",
              "line_type": "VoIP"
            }
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media": [],
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "encoding": "GSM-7",
          "parts": 1,
          "tags": [
            "Greetings"
          ],
          "cost": null,
          "received_at": "2019-01-23T18:10:02.574Z",
          "sent_at": null,
          "completed_at": null,
          "valid_until": null,
          "errors": []
        }
      },
      "JoinConferenceRequest": {
        "required": [
          "call_control_id"
        ],
        "type": "object",
        "title": "Join Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "end_conference_on_exit": {
            "description": "Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "soft_end_conference_on_exit": {
            "description": "Whether the conference should end after the participant leaves the conference. NOTE this doesn't hang up the other participants. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "hold": {
            "description": "Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "mute": {
            "description": "Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "start_conference_on_enter": {
            "description": "Whether the conference should be started after the participant joins the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "supervisor_role": {
            "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "beep_enabled": {
            "description": "Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.",
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "example": "on_exit",
            "type": "string"
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "end_conference_on_exit": true,
          "hold": true,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "mute": true,
          "start_conference_on_enter": true,
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "beep_enabled": "always"
        }
      },
      "LeaveQueueRequest": {
        "type": "object",
        "title": "Leave Queue Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "Loopcount": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      },
      "MessagingFeatureSet": {
        "type": "object",
        "nullable": true,
        "required": [
          "domestic_two_way",
          "international_inbound",
          "international_outbound"
        ],
        "description": "The set of features available for a specific messaging use case (SMS or MMS). Features\ncan vary depending on the characteristics the phone number, as well as its current\nproduct configuration.\n",
        "properties": {
          "domestic_two_way": {
            "type": "boolean",
            "description": "Send messages to and receive messages from numbers in the same country."
          },
          "international_inbound": {
            "type": "boolean",
            "description": "Receive messages from numbers in other countries."
          },
          "international_outbound": {
            "type": "boolean",
            "description": "Send messages to numbers in other countries."
          }
        },
        "example": {
          "domestic_two_way": true,
          "international_inbound": false,
          "international_outbound": true
        }
      },
      "MessagingHostedNumberOrder": {
        "type": "object",
        "example": {
          "id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "record_type": "messaging_hosted_number_order",
          "messaging_profile_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "status": "pending",
          "phone_numbers": [
            {
              "record_type": "messaging_hosted_number",
              "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
              "phone_number": "+18665550001",
              "status": "pending"
            },
            {
              "record_type": "messaging_hosted_number",
              "id": "464bd54e-a328-4b11-a131-28e6793cb6f2",
              "phone_number": "+18665550002",
              "status": "pending"
            }
          ]
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_hosted_number_order",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource unique identifier.",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "nullable": true,
            "description": "Automatically associate the number with this messaging profile ID when the order is complete."
          },
          "status": {
            "type": "string",
            "enum": [
              "failed",
              "pending",
              "successful"
            ]
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostedNumber"
            }
          }
        }
      },
      "MessagingProfile": {
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "messaging_profile"
            ],
            "readOnly": true
          },
          "id": {
            "description": "Identifies the type of resource.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "description": "A user friendly name for the messaging profile.",
            "type": "string"
          },
          "enabled": {
            "description": "Specifies whether the messaging profile is enabled or not.",
            "type": "boolean"
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "webhook_api_version": {
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.",
            "type": "string",
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ]
          },
          "whitelisted_destinations": {
            "description": "Destinations to which the messaging profile is allowed to send. If set to `null`, all destinations will be allowed. Setting a value of `[\"*\"]` has the equivalent effect. The elements in the list must be valid ISO 3166-1 alpha-2 country codes.",
            "type": "array",
            "nullable": true,
            "items": {
              "description": "ISO 3166-1 alpha-2 country code.",
              "type": "string",
              "pattern": "^[A-Z]{2}$"
            }
          },
          "created_at": {
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "v1_secret": {
            "description": "Secret used to authenticate with v1 endpoints.",
            "type": "string"
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          }
        },
        "example": {
          "record_type": "messaging_profile",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "Profile for Messages",
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "enabled": true,
          "webhook_api_version": "2",
          "whitelisted_destinations": [
            "US"
          ],
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 2,
            "skip_unhealthy": false,
            "sticky_sender": true,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "cmpny",
            "replace_blacklist_only": true,
            "send_webhooks": false
          },
          "v1_secret": "rP1VamejkU2v0qIUxntqLW2c"
        }
      },
      "MessagingProfileDetailedMetric": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the aggregated data.",
            "example": "2019-01-23T18:10:02.574Z",
            "readOnly": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingProfileMessageTypeMetrics"
            }
          }
        }
      },
      "MessagingProfileDetailedMetrics": {
        "type": "object",
        "properties": {
          "overview": {
            "$ref": "#/components/schemas/MessagingProfileHighLevelMetrics"
          },
          "detailed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingProfileDetailedMetric"
            }
          }
        },
        "example": {
          "detailed": [
            {
              "metrics": [
                {
                  "label": "longcode",
                  "sent": 1000,
                  "delivered": 990,
                  "errors": 0.01,
                  "received": 750
                }
              ],
              "timestamp": "2019-01-23T18:10:02.574Z"
            }
          ],
          "overview": {
            "record_type": "messaging_profile_metrics",
            "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "phone_numbers": 250,
            "outbound": {
              "sent": 1000,
              "delivered": 990,
              "errors": 0.01
            },
            "inbound": {
              "received": 850
            }
          }
        }
      },
      "MessagingProfileHighLevelMetrics": {
        "type": "object",
        "example": {
          "record_type": "messaging_profile_metrics",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "phone_numbers": 250,
          "outbound": {
            "sent": 1000,
            "delivered": 990,
            "errors": 0.01
          },
          "inbound": {
            "received": 850
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_profile_metrics",
            "enum": [
              "messaging_profile_metrics"
            ],
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "number",
            "description": "The number of phone numbers associated with the messaging profile.",
            "readOnly": true
          },
          "outbound": {
            "type": "object",
            "properties": {
              "sent": {
                "type": "number",
                "description": "The number of outbound messages sent.",
                "readOnly": true
              },
              "delivered": {
                "type": "number",
                "description": "The number of outbound messages successfully delivered.",
                "readOnly": true
              },
              "error_ratio": {
                "type": "number",
                "description": "The ratio of messages sent that resulted in errors.",
                "readOnly": true
              }
            }
          },
          "inbound": {
            "type": "object",
            "properties": {
              "received": {
                "type": "number",
                "description": "The number of inbound messages received.",
                "readOnly": true
              }
            }
          }
        }
      },
      "MessagingProfileMessageTypeMetrics": {
        "type": "object",
        "example": {
          "label": "longcode",
          "sent": 1000,
          "delivered": 990,
          "errors": 0.01,
          "received": 750
        },
        "properties": {
          "label": {
            "type": "string",
            "description": "The metric type.",
            "readOnly": true
          },
          "sent": {
            "type": "number",
            "description": "The number of outbound messages sent.",
            "readOnly": true
          },
          "delivered": {
            "type": "number",
            "description": "The number of outbound messages successfully delivered.",
            "readOnly": true
          },
          "outbound_error_ratio": {
            "type": "number",
            "description": "The ratio of outbound messages sent that resulted in errors.",
            "readOnly": true
          },
          "received": {
            "type": "number",
            "description": "The number of inbound messages received.",
            "readOnly": true
          }
        }
      },
      "MessagingUrlDomain": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "url_domain": {
            "type": "string"
          },
          "use_case": {
            "type": "string"
          }
        },
        "example": {
          "record_type": "messaging_url_domain",
          "id": "464bd54e-a328-4b11-a131-28e6793cb6f2",
          "url_domain": "http://example.com",
          "use_case": "test"
        }
      },
      "NumberHealthMetrics": {
        "type": "object",
        "nullable": false,
        "required": [
          "message_count",
          "inbound_outbound_ratio",
          "success_ratio",
          "spam_ratio"
        ],
        "description": "High level health metrics about the number and it's messaging sending patterns.\n",
        "properties": {
          "message_count": {
            "type": "integer",
            "description": "The number of messages analyzed for the health metrics."
          },
          "inbound_outbound_ratio": {
            "type": "number",
            "format": "float",
            "description": "The ratio of messages received to the number of messages sent."
          },
          "success_ratio": {
            "type": "number",
            "format": "float",
            "description": "The ratio of messages sucessfully delivered to the number of messages attempted."
          },
          "spam_ratio": {
            "type": "number",
            "format": "float",
            "description": "The ratio of messages blocked for spam to the number of messages attempted."
          }
        },
        "example": {
          "message_count": 10,
          "inbound_outbound_ratio": 1,
          "success_ratio": 2,
          "spam_ratio": 10
        }
      },
      "NumberPoolSettings": {
        "type": "object",
        "nullable": true,
        "required": [
          "toll_free_weight",
          "long_code_weight",
          "skip_unhealthy"
        ],
        "description": "Number Pool allows you to send messages from a pool of numbers of different types, assigning\nweights to each type. The pool consists of all the long code and toll free numbers\nassigned to the messaging profile.\n\nTo disable this feature, set the object field to `null`.\n",
        "properties": {
          "toll_free_weight": {
            "type": "number",
            "example": 10,
            "description": "Defines the probability weight for a Toll Free number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100. Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n"
          },
          "long_code_weight": {
            "type": "number",
            "example": 1,
            "description": "Defines the probability weight for a Long Code number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100.  Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n"
          },
          "skip_unhealthy": {
            "type": "boolean",
            "example": true,
            "description": "If set to true all unhealthy numbers will be automatically excluded from the pool.\nHealth metrics per number are calculated on a regular basis, taking into account the deliverability\nrate and the amount of messages marked as spam by upstream carriers.\nNumbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy.\n"
          },
          "sticky_sender": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, Number Pool will try to choose the same sending number for all messages to a particular\nrecipient. If the sending number becomes unhealthy and `skip_unhealthy` is set to true, a new\nnumber will be chosen.\n"
          },
          "geomatch": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, Number Pool will try to choose a sending number with the same area code as the destination\nnumber. If there are no such numbers available, a nunber with a different area code will be chosen. Currently\nonly NANP numbers are supported.\n"
          }
        },
        "example": {
          "toll_free_weight": 10,
          "long_code_weight": 1,
          "skip_unhealthy": true,
          "sticky_sender": false,
          "geomatch": false
        }
      },
      "OutboundMessage": {
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "message.sent",
            "enum": [
              "message.sent",
              "message.finalized"
            ],
            "description": "The type of event being delivered."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created."
          },
          "payload": {
            "$ref": "#/components/schemas/OutboundMessagePayload"
          }
        },
        "example": {
          "record_type": "event",
          "id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "event_type": "message.sent",
          "occurred_at": "date-time",
          "payload": {
            "record_type": "message",
            "direction": "outbound",
            "id": "40385f64-5717-4562-b3fc-2c963f66afa6",
            "type": "MMS",
            "messaging_profile_id": "4000eba1-a0c0-4563-9925-b25e842a7cb6",
            "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
            "from": {
              "phone_number": "+18445550001",
              "carrier": "TELNYX LLC",
              "line_type": "VoIP"
            },
            "to": [
              {
                "phone_number": "+18665550001",
                "status": "queued",
                "carrier": "T-MOBILE USA, INC.",
                "line_type": "Wireless"
              }
            ],
            "text": "Hello, World!",
            "subject": "From Telnyx!",
            "media": [
              {
                "url": "https://pbs.twimg.com/profile_images/1142168442042118144/AW3F4fFD_400x400.png",
                "content_type": null,
                "sha256": null,
                "size": null
              }
            ],
            "webhook_url": "https://www.example.com/hooks",
            "webhook_failover_url": "https://backup.example.com/hooks",
            "encoding": "GSM-7",
            "parts": 1,
            "tags": [
              "Greetings"
            ],
            "cost": null,
            "received_at": "2019-01-23T18:10:02.574Z",
            "sent_at": null,
            "completed_at": null,
            "valid_until": null,
            "errors": []
          }
        }
      },
      "OutboundMessageEvent": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutboundMessage"
          },
          "meta": {
            "type": "object",
            "properties": {
              "attempt": {
                "type": "integer",
                "example": 1,
                "description": "Number of attempts to deliver the webhook event."
              },
              "delivered_to": {
                "type": "string",
                "format": "url",
                "example": "https://www.example.com/hooks",
                "description": "The webhook URL the event was delivered to."
              }
            }
          }
        }
      },
      "OutboundMessagePayload": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "message",
            "enum": [
              "message"
            ],
            "description": "Identifies the type of the resource."
          },
          "direction": {
            "type": "string",
            "example": "outbound",
            "enum": [
              "outbound"
            ],
            "description": "The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "type": {
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ],
            "description": "The type of message."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the organization the messaging profile belongs to."
          },
          "from": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "format": "address",
                "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code)."
              },
              "carrier": {
                "type": "string",
                "description": "The carrier of the receiver."
              },
              "line_type": {
                "type": "string",
                "description": "The line-type of the receiver.",
                "enum": [
                  "Wireline",
                  "Wireless",
                  "VoWiFi",
                  "VoIP",
                  "Pre-Paid Wireless",
                  ""
                ]
              }
            }
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "format": "address",
                  "description": "Receiving address (+E.164 formatted phone number or short code)."
                },
                "status": {
                  "type": "string",
                  "description": "The delivery status of the message.",
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "expired",
                    "sending_failed",
                    "delivery_unconfirmed",
                    "delivered",
                    "delivery_failed"
                  ]
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "type": "string",
                  "description": "The line-type of the receiver.",
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless",
                    ""
                  ]
                }
              }
            }
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject of multimedia message"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "url",
                  "description": "The url of the media requested to be sent."
                },
                "content_type": {
                  "type": "string",
                  "format": "mime-type",
                  "nullable": true,
                  "description": "The MIME type of the requested media."
                },
                "sha256": {
                  "type": "string",
                  "nullable": true,
                  "description": "The SHA256 hash of the requested media."
                },
                "size": {
                  "type": "integer",
                  "nullable": true,
                  "description": "The size of the requested media."
                }
              }
            }
          },
          "webhook_url": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "description": "The URL where webhooks related to this message will be sent."
          },
          "webhook_failover_url": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails."
          },
          "encoding": {
            "type": "string",
            "description": "Encoding scheme used for the message body."
          },
          "parts": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "Number of parts into which the message's body must be split."
          },
          "tags": {
            "type": "array",
            "description": "Tags associated with the resource.",
            "items": {
              "type": "string"
            }
          },
          "cost": {
            "type": "object",
            "nullable": true,
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "description": "The amount deducted from your account."
              },
              "currency": {
                "type": "string",
                "format": "iso4217",
                "description": "The ISO 4217 currency identifier."
              }
            }
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message request was received."
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message was sent."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message was finalized."
          },
          "valid_until": {
            "type": "string",
            "description": "Message must be out of the queue by this time or else it will be discarded and marked as 'sending_failed'. Once the message moves out of the queue, this field will be nulled",
            "format": "date-time",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "description": "These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "record_type": "message",
          "direction": "outbound",
          "id": "40385f64-5717-4562-b3fc-2c963f66afa6",
          "type": "MMS",
          "messaging_profile_id": "4000eba1-a0c0-4563-9925-b25e842a7cb6",
          "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
          "from": {
            "phone_number": "+18445550001",
            "carrier": "TELNYX LLC",
            "line_type": "VoIP"
          },
          "to": [
            {
              "phone_number": "+18665550001",
              "status": "queued",
              "carrier": "T-MOBILE USA, INC.",
              "line_type": "Wireless"
            }
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media": [
            {
              "url": "https://pbs.twimg.com/profile_images/1142168442042118144/AW3F4fFD_400x400.png",
              "content_type": null,
              "sha256": null,
              "size": null
            }
          ],
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "encoding": "GSM-7",
          "parts": 1,
          "tags": [
            "Greetings"
          ],
          "cost": null,
          "received_at": "2019-01-23T18:10:02.574Z",
          "sent_at": null,
          "completed_at": null,
          "valid_until": null,
          "errors": []
        }
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer",
            "example": 3
          },
          "total_results": {
            "type": "integer",
            "example": 55
          },
          "page_number": {
            "type": "integer",
            "example": 2
          },
          "page_size": {
            "type": "integer",
            "example": 25
          }
        }
      },
      "Participant": {
        "type": "object",
        "title": "Participant",
        "required": [
          "record_type",
          "id",
          "call_leg_id",
          "call_control_id",
          "conference",
          "whisper_call_control_ids",
          "created_at",
          "updated_at",
          "end_conference_on_exit",
          "soft_end_conference_on_exit",
          "status",
          "muted",
          "on_hold"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "participant"
            ],
            "example": "participant"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies the call leg associated with the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_control_id": {
            "type": "string",
            "description": "Call Control ID associated with the partiipant of the conference",
            "example": "v2:v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ"
          },
          "conference": {
            "type": "object",
            "description": "Info about the conference that the participant is in",
            "properties": {
              "id": {
                "type": "string",
                "description": "Uniquely identifies the conference",
                "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              },
              "name": {
                "type": "string",
                "description": "Name of the conference",
                "example": "All hands meeting"
              }
            }
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the participant can whisper to..",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.",
            "example": true
          },
          "soft_end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end after the participant leaves the conference.",
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "joining",
              "joined",
              "left"
            ],
            "description": "The status of the participant with respect to the lifecycle within the conference",
            "example": "joining"
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the participant is muted.",
            "example": true
          },
          "on_hold": {
            "type": "boolean",
            "description": "Whether the participant is put on_hold.",
            "example": true
          }
        },
        "example": {
          "record_type": "participant",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "end_conference_on_exit": true,
          "soft_end_conference_on_exit": true,
          "status": "joining",
          "muted": false,
          "on_hold": true,
          "call_control_id": "v2:v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "id": "dfadada7-af74-47bc-83a4-554275f55f5c",
          "call_leg_id": "3a15df2d-c801-4729-adf5-b56dd42e2abb",
          "conference": {
            "id": "41b9acd4-f4da-4ff5-a85c-e07e90b53f46",
            "name": "1"
          }
        }
      },
      "PauseRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "PhoneNumberWithMessagingSettings": {
        "type": "object",
        "example": {
          "record_type": "messaging_settings",
          "id": "1293384261075731499",
          "phone_number": "+18005550001",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "country_code": "US",
          "type": "toll-free",
          "health": {
            "message_count": 122,
            "inbound_outbound_ratio": 0.43,
            "success_ratio": 0.94,
            "spam_ratio": 0.06
          },
          "eligible_messaging_products": [
            "A2P"
          ],
          "traffic_type": "A2P",
          "messaging_product": "A2P",
          "features": {
            "sms": {
              "domestic_two_way": true,
              "international_inbound": true,
              "international_outbound": true
            },
            "mms": null
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_settings",
            "enum": [
              "messaging_phone_number",
              "messaging_settings"
            ],
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "format": "e164",
            "description": "+E.164 formatted phone number.",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier for a messaging profile."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          },
          "country_code": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code.",
            "pattern": "^[A-Z]{2}$",
            "example": "US",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of the phone number",
            "enum": [
              "long-code",
              "toll-free",
              "short-code",
              "longcode",
              "tollfree",
              "shortcode"
            ],
            "readOnly": true
          },
          "health": {
            "$ref": "#/components/schemas/NumberHealthMetrics"
          },
          "eligible_messaging_products": {
            "type": "array",
            "description": "The messaging products that this number can be registered to use",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "traffic_type": {
            "type": "string",
            "description": "The messaging traffic or use case for which the number is currently configured.",
            "example": "P2P",
            "readOnly": true
          },
          "messaging_product": {
            "type": "string",
            "description": "The messaging product that the number is registered to use",
            "example": "P2P"
          },
          "features": {
            "type": "object",
            "readOnly": true,
            "properties": {
              "sms": {
                "$ref": "#/components/schemas/MessagingFeatureSet"
              },
              "mms": {
                "$ref": "#/components/schemas/MessagingFeatureSet"
              }
            }
          }
        }
      },
      "PlayAudioUrlRequest": {
        "type": "object",
        "title": "Play Audio URL Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "loop": {
            "description": "The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.",
            "$ref": "#/components/schemas/Loopcount",
            "example": "infinity",
            "default": 1
          },
          "overlay": {
            "description": "When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "stop": {
            "description": "When specified, it stops the current audio being played.  Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "type": "string",
            "example": "current",
            "default": "all"
          },
          "target_legs": {
            "description": "Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.",
            "type": "string",
            "default": "self",
            "example": "self"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "loop": "infinity",
          "overlay": true,
          "stop": "current",
          "target_legs": "self",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "PlaybackStopRequest": {
        "type": "object",
        "title": "Playback Stop Request",
        "properties": {
          "stop": {
            "description": "Use `current` to stop only the current audio or `all` to stop all audios in the queue.",
            "type": "string",
            "default": "all",
            "example": "current"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "stop": "all",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "Queue": {
        "type": "object",
        "title": "Queue",
        "required": [
          "record_type",
          "id",
          "name",
          "current_size",
          "max_size",
          "average_wait_time_secs",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "queue"
            ],
            "example": "queue"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the queue",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the queue",
            "example": "support"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "current_size": {
            "type": "integer",
            "description": "The number of calls currently in the queue",
            "example": 20
          },
          "max_size": {
            "type": "integer",
            "description": "The maximum number of calls allowed in the queue",
            "example": 50
          },
          "average_wait_time_secs": {
            "type": "integer",
            "description": "The average time that the calls currently in the queue have spent waiting, given in seconds.",
            "example": 175
          }
        },
        "example": {
          "record_type": "queue",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "support",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "current_size": 20,
          "max_size": 50,
          "average_wait_time_secs": 175
        }
      },
      "QueueCall": {
        "type": "object",
        "title": "QueueCall",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type",
          "connection_id",
          "from",
          "to",
          "enqueued_at",
          "wait_time_secs",
          "queue_position",
          "queue_id"
        ],
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "record_type": "queue_call",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "from": "+18005550101",
          "to": "+18005550102",
          "enqueued_at": "2019-01-23T18:10:02.574Z",
          "wait_time_secs": 145,
          "queue_position": 3,
          "queue_id": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "queue_call"
            ],
            "example": "queue_call"
          },
          "call_session_id": {
            "description": "ID that is unique to the call session and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call.",
            "type": "string",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          },
          "connection_id": {
            "type": "string",
            "example": "7267xxxxxxxxxxxxxx",
            "description": "Telnyx connection ID used in the call."
          },
          "from": {
            "type": "string",
            "example": "+35319605860",
            "description": "Number or SIP URI placing the call."
          },
          "to": {
            "type": "string",
            "example": "+13129457420",
            "description": "Destination number or SIP URI of the call."
          },
          "enqueued_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the call was put in the queue",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "wait_time_secs": {
            "type": "integer",
            "description": "The time the call has been waiting in the queue, given in seconds",
            "example": 272
          },
          "queue_position": {
            "type": "integer",
            "description": "Current position of the call in the queue",
            "example": 3
          },
          "queue_id": {
            "type": "string",
            "description": "Unique identifier of the queue the call is in.",
            "example": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
          }
        }
      },
      "Recording": {
        "type": "object",
        "title": "Recording",
        "required": [
          "record_type",
          "id",
          "created_at",
          "updated_at",
          "recording_started_at",
          "recording_ended_at",
          "duration_millis",
          "status",
          "channels",
          "source",
          "download_urls"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "recording"
            ],
            "example": "recording"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the recording",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_started_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording started",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_ended_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording ended",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "duration_millis": {
            "description": "The duration of the recording in milliseconds",
            "type": "integer",
            "format": "int32",
            "example": 60000
          },
          "status": {
            "type": "string",
            "enum": [
              "completed"
            ],
            "description": "The status of the recording. Only resources for `completed` recordings are currently supported",
            "example": "completed"
          },
          "channels": {
            "type": "string",
            "enum": [
              "single",
              "dual"
            ],
            "description": "When `dual`, final audio file has the first leg on channel A, and the rest on channel B.",
            "example": "single"
          },
          "source": {
            "type": "string",
            "enum": [
              "conference",
              "call"
            ],
            "description": "The kind of event that led to this recording being created",
            "example": "conference"
          },
          "conference_id": {
            "type": "string",
            "description": "If a conference recording, uniquely identifies the recorded conference",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_leg_id": {
            "type": "string",
            "description": "If a call recording, uniquely identifies the recorded call leg",
            "example": "11111111-5717-4562-b3fc-2c963f66afa6"
          },
          "call_session_id": {
            "type": "string",
            "description": "If a call recording, uniquely identifies the recorded call session",
            "example": "22222222-5717-4562-b3fc-2c963f66afa6"
          },
          "download_urls": {
            "type": "object",
            "description": "The links to download the recording files",
            "properties": {
              "mp3": {
                "type": "string",
                "description": "Link to download the recording in mp3 format"
              },
              "wav": {
                "type": "string",
                "description": "Link to download the recording in wav format"
              }
            }
          }
        },
        "example": {
          "record_type": "recording",
          "id": "dfadada7-af74-47bc-83a4-554275f55f5c",
          "created_at": "2019-03-29T13:10:00Z",
          "updated_at": "2019-03-29T14:10:00Z",
          "recording_started_at": "2019-03-29T11:10:00Z",
          "recording_ended_at": "2019-03-29T12:10:00Z",
          "duration_millis": 50000,
          "status": "completed",
          "channels": "single",
          "source": "conference",
          "conference_id": "41b9acd4-f4da-4ff5-a85c-e07e90b53f46",
          "call_leg_id": "11111111-5717-4562-b3fc-2c963f66afa6",
          "call_session_id": "22222222-5717-4562-b3fc-2c963f66afa6",
          "download_urls": {
            "mp3": "https://s3.amazonaws.com/some/path"
          }
        }
      },
      "ReferRequest": {
        "type": "object",
        "title": "Refer request",
        "required": [
          "sip_address"
        ],
        "properties": {
          "sip_address": {
            "description": "The SIP URI to which the call will be referred to.",
            "type": "string",
            "example": "sip:username@sip.non-telnyx-address.com"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string"
          }
        },
        "example": {
          "sip_address": "sip:username@sip.non-telnyx-address.com"
        }
      },
      "RejectRequest": {
        "type": "object",
        "title": "Reject Request",
        "required": [
          "cause"
        ],
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "cause": {
            "description": "Cause for call rejection.",
            "type": "string",
            "enum": [
              "CALL_REJECTED",
              "USER_BUSY"
            ],
            "example": "USER_BUSY"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "cause": "USER_BUSY"
        }
      },
      "ReplacedLinkClick": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "link_clicked",
            "description": "Identifies the type of the resource."
          },
          "url": {
            "type": "string",
            "example": "link_clicked",
            "description": "The original link that was sent in the message."
          },
          "to": {
            "type": "string",
            "format": "address",
            "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code)."
          },
          "message_id": {
            "type": "string",
            "format": "uuid",
            "description": "The message ID associated with the clicked link."
          },
          "time_clicked": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message request was received."
          }
        },
        "example": {
          "record_type": "link_clicked",
          "url": "https://telnyx.com",
          "to": "18445550001",
          "message_id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
          "time_clicked": "2019-04-01T14:45:45.450Z"
        }
      },
      "ReplacedLinkClickEvent": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReplacedLinkClick"
          }
        }
      },
      "ResumeRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "SendDTMFRequest": {
        "type": "object",
        "title": "Send DTMF Request",
        "required": [
          "digits"
        ],
        "properties": {
          "digits": {
            "description": "DTMF digits to send. Valid digits are 0-9, A-D, *, and #. Pauses can be added using w (0.5s) and W (1s).",
            "type": "string",
            "example": "1www2WABCDw9"
          },
          "duration_millis": {
            "description": "Specifies for how many milliseconds each digit will be played in the audio stream. Ranges from 100 to 500ms",
            "type": "integer",
            "format": "int32",
            "example": 500,
            "default": 250
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "digits": "1www2WABCDw9",
          "duration_millis": 500,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ShortCode": {
        "type": "object",
        "required": [
          "messaging_profile_id"
        ],
        "example": {
          "record_type": "short_code",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "short_code": "12345",
          "country_code": "US",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "short_code",
            "enum": [
              "short_code"
            ],
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "short_code": {
            "type": "string",
            "description": "Short digit sequence used to address messages.",
            "readOnly": true
          },
          "country_code": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code.",
            "pattern": "^[A-Z]{2}$",
            "example": "US",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier for a messaging profile."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          }
        }
      },
      "SpeakRequest": {
        "type": "object",
        "title": "Speak Request",
        "required": [
          "payload",
          "voice",
          "language"
        ],
        "properties": {
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "service_level": {
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "type": "string",
            "enum": [
              "basic",
              "premium"
            ],
            "example": "premium"
          },
          "stop": {
            "description": "When specified, it stops the current audio being played.  Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "type": "string",
            "default": null,
            "example": "current"
          },
          "voice": {
            "description": "The gender of the voice used to speak back the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language you want spoken.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "Say this on the call",
          "payload_type": "text",
          "service_level": "basic",
          "stop": "current",
          "voice": "female",
          "language": "arb",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartForkingRequest": {
        "type": "object",
        "title": "Start Forking Request",
        "properties": {
          "target": {
            "description": "The network target, <udp:ip_address:port>, where the call's RTP media packets should be forwarded. Both incoming and outgoing media packets will be delivered to the specified target, and information about the stream will be included in the encapsulation protocol header, including the direction (0 = inbound; 1 = outbound), leg (0 = A-leg; 1 = B-leg), and call_leg_id.",
            "type": "string",
            "example": "udp:192.0.2.1:9000"
          },
          "rx": {
            "description": "The network target, <udp:ip_address:port>, where the call's incoming RTP media packets should be forwarded.",
            "type": "string",
            "example": "192.0.2.1:9000"
          },
          "stream_type": {
            "description": "Optionally specify a media type to stream. If `decrpyted` selected, Telnyx will decrypt incoming SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.",
            "type": "string",
            "enum": [
              "raw",
              "decrypted"
            ],
            "default": "raw",
            "example": "decrypted"
          },
          "tx": {
            "description": "The network target, <udp:ip_address:port>, where the call's outgoing RTP media packets should be forwarded.",
            "type": "string",
            "example": "192.0.2.1:9001"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "target": "udp:192.0.2.1:9000",
          "rx": "192.0.2.1:9000",
          "tx": "192.0.2.1:9001",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartRecordingRequest": {
        "type": "object",
        "title": "Start Recording Request",
        "required": [
          "format",
          "channels"
        ],
        "properties": {
          "format": {
            "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "example": "mp3"
          },
          "channels": {
            "description": "When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.",
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "example": "single"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "play_beep": {
            "description": "If enabled, a beep sound will be played at the start of a recording.",
            "type": "boolean",
            "example": true
          },
          "max_length": {
            "description": "Defines the maximum length for the recording in seconds. Minimum value is 0. Maximum value is 14400. Default is 0 (infinite)",
            "type": "integer",
            "example": 100,
            "default": 0,
            "format": "int32"
          }
        },
        "example": {
          "format": "wav",
          "channels": "single",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "play_beep": true,
          "max_length": 0
        }
      },
      "StopForkingRequest": {
        "type": "object",
        "title": "Stop Forking Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopGatherRequest": {
        "type": "object",
        "title": "Stop Gather Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopRecordingRequest": {
        "type": "object",
        "title": "Stop Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ToNumber": {
        "type": "string",
        "format": "address",
        "description": "Receiving address (+E.164 formatted phone number or short code).",
        "example": "+E.164"
      },
      "Transcription": {
        "type": "object",
        "title": "Transcription",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.transcription",
            "enum": [
              "call.transcription"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "description": "Unique identifier and token for controlling the call.",
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "transcription_data": {
                "type": "object",
                "properties": {
                  "confidence": {
                    "type": "number",
                    "format": "double",
                    "example": 0.977219,
                    "description": "Speech recognition confidence level."
                  },
                  "transcript": {
                    "type": "string",
                    "example": "hello this is a test speech",
                    "description": "Recognized text."
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.transcription",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:7subYr8fLrXmaAXm8egeAMpoSJ72J3SGPUuome81-hQuaKRf9b7hKA",
            "call_leg_id": "5ca81340-5beb-11eb-ae45-02420a0f8b69",
            "call_session_id": "5ca81eee-5beb-11eb-ba6c-02420a0f8b69",
            "client_state": null,
            "connection_id": "1240401930086254526",
            "transcription_data": {
              "confidence": 0.977219,
              "transcript": "hello this is a test speech"
            }
          }
        }
      },
      "TranscriptionEvent": {
        "type": "object",
        "title": "Transcription Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Transcription"
          }
        }
      },
      "TranscriptionStartRequest": {
        "type": "object",
        "title": "Transcription start request",
        "properties": {
          "language": {
            "description": "Language to use for speech recognition",
            "type": "string",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "it",
              "pl"
            ],
            "default": "en",
            "example": "en"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "language": "en",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TranscriptionStopRequest": {
        "type": "object",
        "title": "Transcription stop request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TransferCallRequest": {
        "type": "object",
        "title": "Transfer Call Request",
        "required": [
          "to"
        ],
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "sip_auth_username": "username",
          "sip_auth_password": "password"
        },
        "properties": {
          "to": {
            "description": "The DID or SIP URI to dial out and bridge to the given call.",
            "type": "string",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `from` number of the original call if omitted.",
            "type": "string",
            "example": "+18005550101"
          },
          "from_display_name": {
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "type": "string",
            "example": "Company Name"
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.",
            "default": 30,
            "type": "integer",
            "example": 60,
            "format": "int32"
          },
          "time_limit_secs": {
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "default": 14400,
            "type": "integer",
            "example": 600,
            "format": "int32"
          },
          "answering_machine_detection": {
            "description": "Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
            "default": "disabled",
            "type": "string",
            "enum": [
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ]
          },
          "answering_machine_detection_config": {
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance.",
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "description": "Maximum timeout threshold for overall detection.",
                "default": 3500,
                "type": "integer",
                "example": 5000,
                "format": "int32"
              },
              "after_greeting_silence_millis": {
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "default": 800,
                "type": "integer",
                "example": 1000,
                "format": "int32"
              },
              "between_words_silence_millis": {
                "description": "Maximum threshold for silence between words.",
                "default": 50,
                "type": "integer",
                "example": 100,
                "format": "int32"
              },
              "greeting_duration_millis": {
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "default": 3500,
                "type": "integer",
                "example": 1500,
                "format": "int32"
              },
              "initial_silence_millis": {
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 1800,
                "format": "int32"
              },
              "maximum_number_of_words": {
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "default": 5,
                "type": "integer",
                "example": 3,
                "format": "int32"
              },
              "maximum_word_length_millis": {
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              },
              "silence_threshold": {
                "description": "Minimum noise threshold for any analysis.",
                "default": 256,
                "type": "integer",
                "example": 512,
                "format": "int32"
              },
              "greeting_total_analysis_time_millis": {
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "default": 5000,
                "type": "integer",
                "example": 7500,
                "format": "int32"
              },
              "greeting_silence_duration_millis": {
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "default": 1500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              }
            }
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "target_leg_client_state": {
            "description": "Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string",
            "example": "username"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string",
            "example": "password"
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        }
      },
      "UpdateCallControlApplicationRequest": {
        "type": "object",
        "title": "Update Call Control Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "properties": {
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "webhook_event_url": {
            "type": "string",
            "format": "url",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "type": "string",
            "description": "<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "enum": [
              "\"Latency\"",
              "\"Chicago, IL\"",
              "\"Ashburn, VA\"",
              "\"San Jose, CA\""
            ],
            "example": "\"Amsterdam, Netherlands\"",
            "default": "\"Latency\""
          },
          "dtmf_type": {
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "example": "Inband",
            "default": "RFC 2833"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "example": true,
            "default": false
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "example": 10,
            "default": 30
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "url",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          }
        },
        "example": {
          "application_name": "call-router",
          "webhook_event_url": "https://example.com",
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25
        }
      },
      "UpdateConferenceRequest": {
        "required": [
          "call_control_id",
          "supervisor_role"
        ],
        "type": "object",
        "title": "Update Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "supervisor_role": {
            "description": "Sets the participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ]
        }
      },
      "UpdateMessagingProfileRequest": {
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "messaging_profile"
            ],
            "readOnly": true
          },
          "id": {
            "description": "Identifies the type of resource.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "description": "A user friendly name for the messaging profile.",
            "type": "string"
          },
          "enabled": {
            "description": "Specifies whether the messaging profile is enabled or not.",
            "type": "boolean"
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "webhook_api_version": {
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.",
            "type": "string",
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ]
          },
          "whitelisted_destinations": {
            "description": "Destinations to which the messaging profile is allowed to send. If set to `null`, all destinations will be allowed. Setting a value of `[\"*\"]` has the equivalent effect. The elements in the list must be valid ISO 3166-1 alpha-2 country codes.",
            "type": "array",
            "nullable": true,
            "items": {
              "description": "ISO 3166-1 alpha-2 country code.",
              "type": "string",
              "pattern": "^[A-Z]{2}$"
            }
          },
          "created_at": {
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "v1_secret": {
            "description": "Secret used to authenticate with v1 endpoints.",
            "type": "string"
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          }
        },
        "example": {
          "name": "Updated Profile for Messages",
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "enabled": true,
          "webhook_api_version": "2",
          "whitelisted_destinations": [
            "US"
          ],
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 2,
            "skip_unhealthy": false,
            "sticky_sender": true,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "cmpny",
            "replace_blacklist_only": true,
            "send_webhooks": false
          },
          "v1_secret": "rP1VamejkU2v0qIUxntqLW2c"
        }
      },
      "UpdatePhoneNumberMessagingSettingsRequest": {
        "type": "object",
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "messaging_product": {
            "type": "string",
            "description": "The requested messaging product the number should be on",
            "example": "P2P"
          }
        },
        "example": {
          "messaging_profile_id": "dd50eba1-a0c0-4563-9925-b25e842a7cb6",
          "messaging_product": "P2P"
        }
      },
      "UpdateShortCodeRequest": {
        "type": "object",
        "required": [
          "messaging_profile_id"
        ],
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          }
        },
        "example": {
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000"
        }
      },
      "UploadFileMessagingHostedNumberOrderRequest": {
        "type": "object",
        "example": {
          "loa": "example loa",
          "bill": "bill example"
        },
        "properties": {
          "loa": {
            "type": "string",
            "format": "binary",
            "description": "Must be a signed LOA for the numbers in the order in PDF format."
          },
          "bill": {
            "type": "string",
            "format": "binary",
            "description": "Must be the last month's bill with proof of ownership of all of the numbers in the order in PDF format."
          }
        }
      },
      "UrlShortenerSettings": {
        "type": "object",
        "nullable": true,
        "required": [
          "domain"
        ],
        "description": "The URL shortener feature allows automatic replacement of URLs that were generated using\na public URL shortener service. Some examples include bit.do, bit.ly, goo.gl, ht.ly,\nis.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com. Such URLs are replaced with\nwith links generated by Telnyx. The use of custom links can improve branding and message\ndeliverability.\n\nTo disable this feature, set the object field to `null`.\n",
        "properties": {
          "domain": {
            "type": "string",
            "example": "acct.fyi",
            "description": "One of the domains provided by the Telnyx URL shortener service.\n"
          },
          "prefix": {
            "type": "string",
            "example": "",
            "description": "Optional prefix that can be used to identify your brand, and will appear in the Telnyx generated URLs after the domain name.\n"
          },
          "replace_blacklist_only": {
            "type": "boolean",
            "example": true,
            "description": "Use the link replacement tool only for links that are specifically blacklisted by Telnyx.\n"
          },
          "send_webhooks": {
            "type": "boolean",
            "example": false,
            "description": "Receive webhooks for when your replaced links are clicked. Webhooks are sent to the webhooks on the messaging profile.\n"
          }
        },
        "example": {
          "domain": "example.ex",
          "prefix": "",
          "replace_blacklist_only": true,
          "send_webhooks": false
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}