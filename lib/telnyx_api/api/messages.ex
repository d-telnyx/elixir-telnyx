# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule TelnyxAPI.Api.Messages do
  @moduledoc """
  API calls for all endpoints tagged `Messages`.
  """

  alias TelnyxAPI.Connection
  import TelnyxAPI.RequestBuilder


  @doc """
  Send a long code message

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CreateLongCodeMessageRequest): Message payload
  ## Returns

  {:ok, TelnyxAPI.Model.MessageResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_long_code_message(Tesla.Env.client, keyword()) :: {:ok, TelnyxAPI.Model.MessageResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def create_long_code_message(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/messages/long_code")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.MessageResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end

  @doc """
  Send a message
  Send a message with a Phone Number, Alphanumeric Sender ID, Short Code or Number Pool.  This endpoint allows you to send a message with any messaging resource. Current messaging resources include: long-code, short-code, number-pool, and alphanumeric-sender-id. 

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CreateMessageRequest): Message payload
  ## Returns

  {:ok, TelnyxAPI.Model.MessageResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_message(Tesla.Env.client, keyword()) :: {:ok, TelnyxAPI.Model.MessageResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def create_message(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/messages")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.MessageResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end

  @doc """
  Send a message using number pool

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CreateNumberPoolMessageRequest): Message payload
  ## Returns

  {:ok, TelnyxAPI.Model.MessageResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_number_pool_message(Tesla.Env.client, keyword()) :: {:ok, TelnyxAPI.Model.MessageResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def create_number_pool_message(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/messages/number_pool")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.MessageResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end

  @doc """
  Send a short code message

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CreateShortCodeMessageRequest): Message payload
  ## Returns

  {:ok, TelnyxAPI.Model.MessageResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_short_code_message(Tesla.Env.client, keyword()) :: {:ok, TelnyxAPI.Model.MessageResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def create_short_code_message(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/messages/short_code")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.MessageResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end

  @doc """
  Retrieve a message
  Note: This API endpoint can only retrieve messages that are no older than 10 days since their creation. If you require messages older than this, please generate an [MDR report.](https://developers.telnyx.com/docs/api/v1/reports/MDR-Reports)

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): The id of the message
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.MessageResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec retrieve_message(Tesla.Env.client, String.t, keyword()) :: {:ok, TelnyxAPI.Model.MessageResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def retrieve_message(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/messages/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.MessageResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end
end
