# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule TelnyxAPI.Api.ConferenceCommands do
  @moduledoc """
  API calls for all endpoints tagged `ConferenceCommands`.
  """

  alias TelnyxAPI.Connection
  import TelnyxAPI.RequestBuilder


  @doc """
  Dial a new participant into a conference
  Dials a phone number and, when the call is answered, automatically joins them into the specified conference.  **Expected Webhooks:**  - `call.hangup` - `call.answered` - `conference.participant.joined` - `conference.participant.left` 

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - conference_call_request (ConferenceCallRequest): Dial Into Conference request object
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_dial_participant_in(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferenceCallRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_dial_participant_in(connection, id, conference_call_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/dial_participant")
    |> add_param(:body, :body, conference_call_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Hold conference participants
  Hold a list of participants in a conference call

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - conference_hold_request (ConferenceHoldRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_hold_participants(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferenceHoldRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_hold_participants(connection, id, conference_hold_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/hold")
    |> add_param(:body, :body, conference_hold_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Join a conference
  Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the `call_control_id` of the leg you wish to join to the conference as an attribute.  **Expected Webhooks:**  - `conference.participant.joined` - `conference.participant.left` 

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - join_conference_request (JoinConferenceRequest): Join Conference request object
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_join(Tesla.Env.client, String.t, TelnyxAPI.Model.JoinConferenceRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_join(connection, id, join_conference_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/join")
    |> add_param(:body, :body, join_conference_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 422, false}
    ])
  end

  @doc """
  Mute conference participants
  Mute a list of participants in a conference call

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - conference_mute_request (ConferenceMuteRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_mute_participants(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferenceMuteRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_mute_participants(connection, id, conference_mute_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/mute")
    |> add_param(:body, :body, conference_mute_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Play audio to conference participants
  Play audio to all or some participants on a conference call.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - conference_play_request (ConferencePlayRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_play_audio(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferencePlayRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_play_audio(connection, id, conference_play_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/play")
    |> add_param(:body, :body, conference_play_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Speak text to conference participants
  Convert text to speech and play it to all or some participants.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Specifies the conference by id or name
  - conference_speak_request (ConferenceSpeakRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_speak_text(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferenceSpeakRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_speak_text(connection, id, conference_speak_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/speak")
    |> add_param(:body, :body, conference_speak_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Conference recording start
  Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.  **Expected Webhooks:**  - `conference.recording.saved`

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Specifies the conference to record by id or name
  - start_recording_request (StartRecordingRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_start_recording(Tesla.Env.client, String.t, TelnyxAPI.Model.StartRecordingRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_start_recording(connection, id, start_recording_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/record_start")
    |> add_param(:body, :body, start_recording_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Stop audio being played on the conference
  Stop audio being played to all or some participants on a conference call.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - conference_stop_request (ConferenceStopRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_stop_audio(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferenceStopRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_stop_audio(connection, id, conference_stop_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/stop")
    |> add_param(:body, :body, conference_stop_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Conference recording stop
  Stop recording the conference.  **Expected Webhooks:**  - `conference.recording.saved` 

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Specifies the conference to stop the recording for by id or name
  - stop_recording_request (StopRecordingRequest): Stop recording conference request
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_stop_recording(Tesla.Env.client, String.t, TelnyxAPI.Model.StopRecordingRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_stop_recording(connection, id, stop_recording_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/record_stop")
    |> add_param(:body, :body, stop_recording_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Unhold conference participants
  Unhold a list of participants in a conference call

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - conference_unhold_request (ConferenceUnholdRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_unhold_participants(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferenceUnholdRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_unhold_participants(connection, id, conference_unhold_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/unhold")
    |> add_param(:body, :body, conference_unhold_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Unmute conference participants
  Unmute a list of participants in a conference call

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - conference_unmute_request (ConferenceUnmuteRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_unmute_participants(Tesla.Env.client, String.t, TelnyxAPI.Model.ConferenceUnmuteRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_unmute_participants(connection, id, conference_unmute_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/unmute")
    |> add_param(:body, :body, conference_unmute_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Update conference participant
  Update conference participant supervisor_role

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id or name
  - update_conference_request (UpdateConferenceRequest): Update Conference request object
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec conference_update(Tesla.Env.client, String.t, TelnyxAPI.Model.UpdateConferenceRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceCommandResponse.t} | {:error, Tesla.Env.t}
  def conference_update(connection, id, update_conference_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences/#{id}/actions/update")
    |> add_param(:body, :body, update_conference_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceCommandResponse{}},
      { 401, false},
      { 422, false}
    ])
  end

  @doc """
  Create conference
  Create a conference from an existing call leg using a `call_control_id` and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.  **Expected Webhooks:**  - `conference.created` - `conference.participant.joined` - `conference.participant.left` - `conference.ended` - `conference.recording.saved` - `conference.floor.changed` 

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - create_conference_request (CreateConferenceRequest): Create a conference
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_conference(Tesla.Env.client, TelnyxAPI.Model.CreateConferenceRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceResponse.t} | {:error, Tesla.Env.t}
  def create_conference(connection, create_conference_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/conferences")
    |> add_param(:body, :body, create_conference_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceResponse{}},
      { 401, false},
      { 422, false}
    ])
  end

  @doc """
  List conference participants
  Lists conference participants

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - conference_id (String.t): Uniquely identifies the conference by id
  - opts (KeywordList): [optional] Optional parameters
    - :filter_left_square_bracketmuted_right_square_bracket (boolean()): If present, participants will be filtered to those who are/are not muted
    - :filter_left_square_bracketon_hold_right_square_bracket (boolean()): If present, participants will be filtered to those who are/are not put on hold
    - :filter_left_square_bracketwhispering_right_square_bracket (boolean()): If present, participants will be filtered to those who are whispering or are not
    - :page_left_square_bracketnumber_right_square_bracket (integer()): The page number to load
    - :page_left_square_bracketsize_right_square_bracket (integer()): The size of the page
  ## Returns

  {:ok, TelnyxAPI.Model.ListParticipantsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_conference_participants(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ListParticipantsResponse.t} | {:error, Tesla.Env.t}
  def list_conference_participants(connection, conference_id, opts \\ []) do
    optional_params = %{
      :"filter[muted]" => :query,
      :"filter[on_hold]" => :query,
      :"filter[whispering]" => :query,
      :"page[number]" => :query,
      :"page[size]" => :query
    }
    %{}
    |> method(:get)
    |> url("/conferences/#{conference_id}/participants")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ListParticipantsResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  List conferences
  Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by `expires_at`.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filter_left_square_bracketname_right_square_bracket (String.t): If present, conferences will be filtered to those with a matching `name` attribute. Matching is case-sensitive
    - :page_left_square_bracketnumber_right_square_bracket (integer()): The page number to load
    - :page_left_square_bracketsize_right_square_bracket (integer()): The size of the page
  ## Returns

  {:ok, TelnyxAPI.Model.ListConferencesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_conferences(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ListConferencesResponse.t} | {:error, Tesla.Env.t}
  def list_conferences(connection, opts \\ []) do
    optional_params = %{
      :"filter[name]" => :query,
      :"page[number]" => :query,
      :"page[size]" => :query
    }
    %{}
    |> method(:get)
    |> url("/conferences")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ListConferencesResponse{}},
      { 401, false},
      { 422, false}
    ])
  end

  @doc """
  Retrieve a conference
  Retrieve an existing conference

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the conference by id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ConferenceResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec retrieve_conference(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ConferenceResponse.t} | {:error, Tesla.Env.t}
  def retrieve_conference(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/conferences/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ConferenceResponse{}},
      { 404, false}
    ])
  end
end
