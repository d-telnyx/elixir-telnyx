# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule TelnyxAPI.Api.CallControlApplications do
  @moduledoc """
  API calls for all endpoints tagged `CallControlApplications`.
  """

  alias TelnyxAPI.Connection
  import TelnyxAPI.RequestBuilder


  @doc """
  Create a call control application
  Create a call control application.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - create_call_control_application_request (CreateCallControlApplicationRequest): Create call control application request.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_call_control_application(Tesla.Env.client, TelnyxAPI.Model.CreateCallControlApplicationRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} | {:error, Tesla.Env.t}
  def create_call_control_application(connection, create_call_control_application_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/call_control_applications")
    |> add_param(:body, :body, create_call_control_application_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %TelnyxAPI.Model.CallControlApplicationResponse{}},
      { 422, false}
    ])
  end

  @doc """
  Delete a call control application
  Deletes a call control application.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Identifies the resource.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_call_control_application(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} | {:error, Tesla.Env.t}
  def delete_call_control_application(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/call_control_applications/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.CallControlApplicationResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  List call control applications
  Return a list of call control applications.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :page_left_square_bracketnumber_right_square_bracket (integer()): The page number to load
    - :page_left_square_bracketsize_right_square_bracket (integer()): The size of the page
    - :filter_left_square_bracketapplication_name_right_square_bracket_left_square_bracketcontains_right_square_bracket (String.t): If present, applications with <code>application_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.
    - :filter_left_square_bracketoutbound_periodoutbound_voice_profile_id_right_square_bracket (String.t): Identifies the associated outbound voice profile.
    - :sort (String.t): Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/> That is: <ul>   <li>     <code>connection_name</code>: sorts the result by the     <code>connection_name</code> field in ascending order.   </li>    <li>     <code>-connection_name</code>: sorts the result by the     <code>connection_name</code> field in descending order.   </li> </ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.
  ## Returns

  {:ok, TelnyxAPI.Model.ListCallControlApplicationsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_call_control_applications(Tesla.Env.client, keyword()) :: {:ok, TelnyxAPI.Model.ListCallControlApplicationsResponse.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def list_call_control_applications(connection, opts \\ []) do
    optional_params = %{
      :"page[number]" => :query,
      :"page[size]" => :query,
      :"filter[application_name][contains]" => :query,
      :"filter[outbound.outbound_voice_profile_id]" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/call_control_applications")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ListCallControlApplicationsResponse{}},
      { 400, false},
      { 401, false},
      { 404, false}
    ])
  end

  @doc """
  Retrieve a call control application
  Retrieves the details of an existing call control application.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Identifies the resource.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec retrieve_call_control_application(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} | {:error, Tesla.Env.t}
  def retrieve_call_control_application(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/call_control_applications/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.CallControlApplicationResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end

  @doc """
  Update a call control application
  Updates settings of an existing call control application.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Identifies the resource.
  - update_call_control_application_request (UpdateCallControlApplicationRequest): Update call control application request.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_call_control_application(Tesla.Env.client, String.t, TelnyxAPI.Model.UpdateCallControlApplicationRequest.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.CallControlApplicationResponse.t} | {:error, Tesla.Env.t}
  def update_call_control_application(connection, id, update_call_control_application_request, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/call_control_applications/#{id}")
    |> add_param(:body, :body, update_call_control_application_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.CallControlApplicationResponse{}},
      { 401, false},
      { 404, false},
      { 422, false}
    ])
  end
end
