# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule TelnyxAPI.Api.RecordingsCommands do
  @moduledoc """
  API calls for all endpoints tagged `RecordingsCommands`.
  """

  alias TelnyxAPI.Connection
  import TelnyxAPI.RequestBuilder


  @doc """
  List recordings
  Lists recordings for the authenticated user

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filter_left_square_bracketconference_id_right_square_bracket (String.t): Return only recordings associated with a given conference
    - :filter_left_square_bracketcreated_at_right_square_bracket_left_square_bracketgte_right_square_bracket (String.t): Return only recordings created later than or at given ISO 8601 datetime
    - :filter_left_square_bracketcreated_at_right_square_bracket_left_square_bracketlte_right_square_bracket (String.t): Return only recordings created earlier than or at given ISO 8601 datetime
    - :page_left_square_bracketnumber_right_square_bracket (integer()): The page number to load
    - :page_left_square_bracketsize_right_square_bracket (integer()): The size of the page
  ## Returns

  {:ok, TelnyxAPI.Model.ListRecordingsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_recordings(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ListRecordingsResponse.t} | {:error, Tesla.Env.t}
  def list_recordings(connection, opts \\ []) do
    optional_params = %{
      :"filter[conference_id]" => :query,
      :"filter[created_at][gte]" => :query,
      :"filter[created_at][lte]" => :query,
      :"page[number]" => :query,
      :"page[size]" => :query
    }
    %{}
    |> method(:get)
    |> url("/recordings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ListRecordingsResponse{}},
      { 401, false},
      { 422, false}
    ])
  end

  @doc """
  Retrieve a recording
  Retrieve a recording from the authenticated user's recordings

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): Uniquely identifies the recording
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.GetRecordingResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec retrieve_recording(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.GetRecordingResponse.t} | {:error, Tesla.Env.t}
  def retrieve_recording(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recordings/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.GetRecordingResponse{}},
      { 401, false},
      { 404, false}
    ])
  end
end
