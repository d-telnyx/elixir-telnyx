# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule TelnyxAPI.Api.ShortCodes do
  @moduledoc """
  API calls for all endpoints tagged `ShortCodes`.
  """

  alias TelnyxAPI.Connection
  import TelnyxAPI.RequestBuilder


  @doc """
  List short codes

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :page_left_square_bracketnumber_right_square_bracket (integer()): The page number to load
    - :page_left_square_bracketsize_right_square_bracket (integer()): The size of the page
    - :filter_left_square_bracketmessaging_profile_id_right_square_bracket (String.t): Filter by Messaging Profile ID. Use the string `null` for phone numbers without assigned profiles. A synonym for the `/messaging_profiles/{id}/short_codes` endpoint when querying about an extant profile.
  ## Returns

  {:ok, TelnyxAPI.Model.ListShortCodesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_short_codes(Tesla.Env.client, keyword()) :: {:ok, TelnyxAPI.Model.ListShortCodesResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def list_short_codes(connection, opts \\ []) do
    optional_params = %{
      :"page[number]" => :query,
      :"page[size]" => :query,
      :"filter[messaging_profile_id]" => :query
    }
    %{}
    |> method(:get)
    |> url("/short_codes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ListShortCodesResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end

  @doc """
  Retrieve a short code

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): The id of the short code
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ShortCodeResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec retrieve_short_code(Tesla.Env.client, String.t, keyword()) :: {:ok, TelnyxAPI.Model.ShortCodeResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def retrieve_short_code(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/short_codes/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ShortCodeResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end

  @doc """
  Update short code
  Update the settings for a specific short code. To unbind a short code from a profile, set the `messaging_profile_id` to `null` or an empty string.

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - id (String.t): The id of the short code
  - update_short_code_request (UpdateShortCodeRequest): Short code update
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.ShortCodeResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_short_code(Tesla.Env.client, String.t, TelnyxAPI.Model.UpdateShortCodeRequest.t, keyword()) :: {:ok, TelnyxAPI.Model.ShortCodeResponse.t} | {:ok, TelnyxAPI.Model.Errors.t} | {:error, Tesla.Env.t}
  def update_short_code(connection, id, update_short_code_request, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/short_codes/#{id}")
    |> add_param(:body, :body, update_short_code_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ShortCodeResponse{}},
      { :default, %TelnyxAPI.Model.Errors{}}
    ])
  end
end
