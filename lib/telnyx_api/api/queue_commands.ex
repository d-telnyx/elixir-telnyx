# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule TelnyxAPI.Api.QueueCommands do
  @moduledoc """
  API calls for all endpoints tagged `QueueCommands`.
  """

  alias TelnyxAPI.Connection
  import TelnyxAPI.RequestBuilder


  @doc """
  Retrieve calls from a queue
  Retrieve the list of calls in an existing queue

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - queue_name (String.t): Uniquely identifies the queue by name
  - opts (KeywordList): [optional] Optional parameters
    - :page_left_square_bracketnumber_right_square_bracket (integer()): The page number to load
    - :page_left_square_bracketsize_right_square_bracket (integer()): The size of the page
  ## Returns

  {:ok, TelnyxAPI.Model.ListQueueCallsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_queue_calls(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.ListQueueCallsResponse.t} | {:error, Tesla.Env.t}
  def list_queue_calls(connection, queue_name, opts \\ []) do
    optional_params = %{
      :"page[number]" => :query,
      :"page[size]" => :query
    }
    %{}
    |> method(:get)
    |> url("/queues/#{queue_name}/calls")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.ListQueueCallsResponse{}},
      { 404, false}
    ])
  end

  @doc """
  Retrieve a call from a queue
  Retrieve an existing call from an existing queue

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - queue_name (String.t): Uniquely identifies the queue by name
  - call_control_id (String.t): Unique identifier and token for controlling the call
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.QueueCallResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec retrieve_call_from_queue(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.QueueCallResponse.t} | {:error, Tesla.Env.t}
  def retrieve_call_from_queue(connection, queue_name, call_control_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/queues/#{queue_name}/calls/#{call_control_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.QueueCallResponse{}},
      { 404, false}
    ])
  end

  @doc """
  Retrieve a call queue
  Retrieve an existing call queue

  ## Parameters

  - connection (TelnyxAPI.Connection): Connection to server
  - queue_name (String.t): Uniquely identifies the queue by name
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TelnyxAPI.Model.QueueResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec retrieve_call_queue(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, TelnyxAPI.Model.QueueResponse.t} | {:error, Tesla.Env.t}
  def retrieve_call_queue(connection, queue_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/queues/#{queue_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TelnyxAPI.Model.QueueResponse{}},
      { 404, false}
    ])
  end
end
